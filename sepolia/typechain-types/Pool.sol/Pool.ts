/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface PoolInterface extends utils.Interface {
  functions: {
    "NAME()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bind(address,uint256,uint256)": FunctionFragment;
    "calcInGivenOut(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcOutGivenIn(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcPoolInGivenSingleOut(uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcPoolOutGivenSingleIn(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcSingleInGivenPoolOut(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcSingleOutGivenPoolIn(uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcSpotPrice(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseApproval(address,uint256)": FunctionFragment;
    "exitPool(uint256,uint256[])": FunctionFragment;
    "exitswapExternAmountOut(address,uint256,uint256)": FunctionFragment;
    "exitswapPoolAmountIn(address,uint256,uint256)": FunctionFragment;
    "finalize()": FunctionFragment;
    "getBalance(address)": FunctionFragment;
    "getController()": FunctionFragment;
    "getCurrentTokens()": FunctionFragment;
    "getDenormalizedWeight(address)": FunctionFragment;
    "getExitFee()": FunctionFragment;
    "getExitFeeCollector()": FunctionFragment;
    "getFinalTokens()": FunctionFragment;
    "getNormalizedWeight(address)": FunctionFragment;
    "getNumTokens()": FunctionFragment;
    "getSpotPrice(address,address)": FunctionFragment;
    "getSpotPriceSansFee(address,address)": FunctionFragment;
    "getSwapFee()": FunctionFragment;
    "getTotalDenormalizedWeight()": FunctionFragment;
    "gulp(address)": FunctionFragment;
    "increaseApproval(address,uint256)": FunctionFragment;
    "isBound(address)": FunctionFragment;
    "isFinalized()": FunctionFragment;
    "isPublicSwap()": FunctionFragment;
    "joinPool(uint256,uint256[])": FunctionFragment;
    "joinswapExternAmountIn(address,uint256,uint256)": FunctionFragment;
    "joinswapPoolAmountOut(address,uint256,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "rebind(address,uint256,uint256)": FunctionFragment;
    "setController(address)": FunctionFragment;
    "setExitFee(uint256)": FunctionFragment;
    "setExitFeeCollector(address)": FunctionFragment;
    "setPublicSwap(bool)": FunctionFragment;
    "setSwapFee(uint256)": FunctionFragment;
    "swapExactAmountIn(address,uint256,address,uint256,uint256)": FunctionFragment;
    "swapExactAmountOut(address,uint256,address,uint256,uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unbind(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "NAME"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "bind"
      | "calcInGivenOut"
      | "calcOutGivenIn"
      | "calcPoolInGivenSingleOut"
      | "calcPoolOutGivenSingleIn"
      | "calcSingleInGivenPoolOut"
      | "calcSingleOutGivenPoolIn"
      | "calcSpotPrice"
      | "decimals"
      | "decreaseApproval"
      | "exitPool"
      | "exitswapExternAmountOut"
      | "exitswapPoolAmountIn"
      | "finalize"
      | "getBalance"
      | "getController"
      | "getCurrentTokens"
      | "getDenormalizedWeight"
      | "getExitFee"
      | "getExitFeeCollector"
      | "getFinalTokens"
      | "getNormalizedWeight"
      | "getNumTokens"
      | "getSpotPrice"
      | "getSpotPriceSansFee"
      | "getSwapFee"
      | "getTotalDenormalizedWeight"
      | "gulp"
      | "increaseApproval"
      | "isBound"
      | "isFinalized"
      | "isPublicSwap"
      | "joinPool"
      | "joinswapExternAmountIn"
      | "joinswapPoolAmountOut"
      | "name"
      | "rebind"
      | "setController"
      | "setExitFee"
      | "setExitFeeCollector"
      | "setPublicSwap"
      | "setSwapFee"
      | "swapExactAmountIn"
      | "swapExactAmountOut"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "unbind"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bind",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcInGivenOut",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcOutGivenIn",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcPoolInGivenSingleOut",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcPoolOutGivenSingleIn",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcSingleInGivenPoolOut",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcSingleOutGivenPoolIn",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcSpotPrice",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseApproval",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPool",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exitswapExternAmountOut",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exitswapPoolAmountIn",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "finalize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDenormalizedWeight",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getExitFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExitFeeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFinalTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNormalizedWeight",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSpotPrice",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpotPriceSansFee",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDenormalizedWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gulp",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseApproval",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isBound",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isFinalized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPublicSwap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "joinPool",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "joinswapExternAmountIn",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "joinswapPoolAmountOut",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebind",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExitFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExitFeeCollector",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicSwap",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactAmountIn",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactAmountOut",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unbind",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bind", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcInGivenOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcOutGivenIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcPoolInGivenSingleOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcPoolOutGivenSingleIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcSingleInGivenPoolOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcSingleOutGivenPoolIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcSpotPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exitPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exitswapExternAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitswapPoolAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDenormalizedWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getExitFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExitFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFinalTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNormalizedWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpotPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpotPriceSansFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSwapFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDenormalizedWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gulp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isBound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPublicSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "joinswapExternAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinswapPoolAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebind", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setExitFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setExitFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSwapFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapExactAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unbind", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "LogCall(bytes4,address,bytes)": EventFragment;
    "LogExit(address,address,uint256)": EventFragment;
    "LogJoin(address,address,uint256)": EventFragment;
    "LogSwap(address,address,address,uint256,uint256)": EventFragment;
    "NewExitFee(address,address,uint256,uint256)": EventFragment;
    "NewExitFeeCollector(address,address,address,address)": EventFragment;
    "NewSwapFee(address,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "WeightChanged(address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogCall"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogExit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogJoin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewExitFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewExitFeeCollector"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSwapFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WeightChanged"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface LogCallEventObject {
  sig: string;
  caller: string;
  data: string;
}
export type LogCallEvent = TypedEvent<
  [string, string, string],
  LogCallEventObject
>;

export type LogCallEventFilter = TypedEventFilter<LogCallEvent>;

export interface LogExitEventObject {
  caller: string;
  tokenOut: string;
  tokenAmountOut: BigNumber;
}
export type LogExitEvent = TypedEvent<
  [string, string, BigNumber],
  LogExitEventObject
>;

export type LogExitEventFilter = TypedEventFilter<LogExitEvent>;

export interface LogJoinEventObject {
  caller: string;
  tokenIn: string;
  tokenAmountIn: BigNumber;
}
export type LogJoinEvent = TypedEvent<
  [string, string, BigNumber],
  LogJoinEventObject
>;

export type LogJoinEventFilter = TypedEventFilter<LogJoinEvent>;

export interface LogSwapEventObject {
  caller: string;
  tokenIn: string;
  tokenOut: string;
  tokenAmountIn: BigNumber;
  tokenAmountOut: BigNumber;
}
export type LogSwapEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  LogSwapEventObject
>;

export type LogSwapEventFilter = TypedEventFilter<LogSwapEvent>;

export interface NewExitFeeEventObject {
  pool: string;
  caller: string;
  oldFee: BigNumber;
  newFee: BigNumber;
}
export type NewExitFeeEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  NewExitFeeEventObject
>;

export type NewExitFeeEventFilter = TypedEventFilter<NewExitFeeEvent>;

export interface NewExitFeeCollectorEventObject {
  pool: string;
  caller: string;
  oldCollector: string;
  newCollector: string;
}
export type NewExitFeeCollectorEvent = TypedEvent<
  [string, string, string, string],
  NewExitFeeCollectorEventObject
>;

export type NewExitFeeCollectorEventFilter =
  TypedEventFilter<NewExitFeeCollectorEvent>;

export interface NewSwapFeeEventObject {
  pool: string;
  caller: string;
  oldFee: BigNumber;
  newFee: BigNumber;
}
export type NewSwapFeeEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  NewSwapFeeEventObject
>;

export type NewSwapFeeEventFilter = TypedEventFilter<NewSwapFeeEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WeightChangedEventObject {
  pool: string;
  caller: string;
  token: string;
  oldWeight: BigNumber;
  newWeight: BigNumber;
}
export type WeightChangedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  WeightChangedEventObject
>;

export type WeightChangedEventFilter = TypedEventFilter<WeightChangedEvent>;

export interface Pool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NAME(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bind(
      token: PromiseOrValue<string>,
      balance: PromiseOrValue<BigNumberish>,
      denorm: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calcInGivenOut(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcOutGivenIn(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcPoolInGivenSingleOut(
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcPoolOutGivenSingleIn(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcSingleInGivenPoolOut(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      poolAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcSingleOutGivenPoolIn(
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      poolAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcSpotPrice(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseApproval(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exitPool(
      poolAmountIn: PromiseOrValue<BigNumberish>,
      minAmountsOut: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exitswapExternAmountOut(
      tokenOut: PromiseOrValue<string>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      maxPoolAmountIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exitswapPoolAmountIn(
      tokenOut: PromiseOrValue<string>,
      poolAmountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finalize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBalance(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getController(overrides?: CallOverrides): Promise<[string]>;

    getCurrentTokens(
      overrides?: CallOverrides
    ): Promise<[string[]] & { tokens: string[] }>;

    getDenormalizedWeight(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getExitFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getExitFeeCollector(overrides?: CallOverrides): Promise<[string]>;

    getFinalTokens(
      overrides?: CallOverrides
    ): Promise<[string[]] & { tokens: string[] }>;

    getNormalizedWeight(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNumTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSpotPrice(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSpotPriceSansFee(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSwapFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalDenormalizedWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    gulp(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseApproval(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isBound(
      t: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isFinalized(overrides?: CallOverrides): Promise<[boolean]>;

    isPublicSwap(overrides?: CallOverrides): Promise<[boolean]>;

    joinPool(
      poolAmountOut: PromiseOrValue<BigNumberish>,
      maxAmountsIn: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    joinswapExternAmountIn(
      tokenIn: PromiseOrValue<string>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      minPoolAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    joinswapPoolAmountOut(
      tokenIn: PromiseOrValue<string>,
      poolAmountOut: PromiseOrValue<BigNumberish>,
      maxAmountIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    rebind(
      token: PromiseOrValue<string>,
      balance: PromiseOrValue<BigNumberish>,
      denorm: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setController(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExitFee(
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExitFeeCollector(
      newAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPublicSwap(
      public_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSwapFee(
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactAmountIn(
      tokenIn: PromiseOrValue<string>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      tokenOut: PromiseOrValue<string>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactAmountOut(
      tokenIn: PromiseOrValue<string>,
      maxAmountIn: PromiseOrValue<BigNumberish>,
      tokenOut: PromiseOrValue<string>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unbind(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  NAME(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bind(
    token: PromiseOrValue<string>,
    balance: PromiseOrValue<BigNumberish>,
    denorm: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calcInGivenOut(
    tokenBalanceIn: PromiseOrValue<BigNumberish>,
    tokenWeightIn: PromiseOrValue<BigNumberish>,
    tokenBalanceOut: PromiseOrValue<BigNumberish>,
    tokenWeightOut: PromiseOrValue<BigNumberish>,
    tokenAmountOut: PromiseOrValue<BigNumberish>,
    swapFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcOutGivenIn(
    tokenBalanceIn: PromiseOrValue<BigNumberish>,
    tokenWeightIn: PromiseOrValue<BigNumberish>,
    tokenBalanceOut: PromiseOrValue<BigNumberish>,
    tokenWeightOut: PromiseOrValue<BigNumberish>,
    tokenAmountIn: PromiseOrValue<BigNumberish>,
    swapFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcPoolInGivenSingleOut(
    tokenBalanceOut: PromiseOrValue<BigNumberish>,
    tokenWeightOut: PromiseOrValue<BigNumberish>,
    poolSupply: PromiseOrValue<BigNumberish>,
    totalWeight: PromiseOrValue<BigNumberish>,
    tokenAmountOut: PromiseOrValue<BigNumberish>,
    swapFee: PromiseOrValue<BigNumberish>,
    exitFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcPoolOutGivenSingleIn(
    tokenBalanceIn: PromiseOrValue<BigNumberish>,
    tokenWeightIn: PromiseOrValue<BigNumberish>,
    poolSupply: PromiseOrValue<BigNumberish>,
    totalWeight: PromiseOrValue<BigNumberish>,
    tokenAmountIn: PromiseOrValue<BigNumberish>,
    swapFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcSingleInGivenPoolOut(
    tokenBalanceIn: PromiseOrValue<BigNumberish>,
    tokenWeightIn: PromiseOrValue<BigNumberish>,
    poolSupply: PromiseOrValue<BigNumberish>,
    totalWeight: PromiseOrValue<BigNumberish>,
    poolAmountOut: PromiseOrValue<BigNumberish>,
    swapFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcSingleOutGivenPoolIn(
    tokenBalanceOut: PromiseOrValue<BigNumberish>,
    tokenWeightOut: PromiseOrValue<BigNumberish>,
    poolSupply: PromiseOrValue<BigNumberish>,
    totalWeight: PromiseOrValue<BigNumberish>,
    poolAmountIn: PromiseOrValue<BigNumberish>,
    swapFee: PromiseOrValue<BigNumberish>,
    exitFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcSpotPrice(
    tokenBalanceIn: PromiseOrValue<BigNumberish>,
    tokenWeightIn: PromiseOrValue<BigNumberish>,
    tokenBalanceOut: PromiseOrValue<BigNumberish>,
    tokenWeightOut: PromiseOrValue<BigNumberish>,
    swapFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseApproval(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exitPool(
    poolAmountIn: PromiseOrValue<BigNumberish>,
    minAmountsOut: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exitswapExternAmountOut(
    tokenOut: PromiseOrValue<string>,
    tokenAmountOut: PromiseOrValue<BigNumberish>,
    maxPoolAmountIn: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exitswapPoolAmountIn(
    tokenOut: PromiseOrValue<string>,
    poolAmountIn: PromiseOrValue<BigNumberish>,
    minAmountOut: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finalize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBalance(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getController(overrides?: CallOverrides): Promise<string>;

  getCurrentTokens(overrides?: CallOverrides): Promise<string[]>;

  getDenormalizedWeight(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getExitFee(overrides?: CallOverrides): Promise<BigNumber>;

  getExitFeeCollector(overrides?: CallOverrides): Promise<string>;

  getFinalTokens(overrides?: CallOverrides): Promise<string[]>;

  getNormalizedWeight(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNumTokens(overrides?: CallOverrides): Promise<BigNumber>;

  getSpotPrice(
    tokenIn: PromiseOrValue<string>,
    tokenOut: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSpotPriceSansFee(
    tokenIn: PromiseOrValue<string>,
    tokenOut: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalDenormalizedWeight(overrides?: CallOverrides): Promise<BigNumber>;

  gulp(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseApproval(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isBound(
    t: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFinalized(overrides?: CallOverrides): Promise<boolean>;

  isPublicSwap(overrides?: CallOverrides): Promise<boolean>;

  joinPool(
    poolAmountOut: PromiseOrValue<BigNumberish>,
    maxAmountsIn: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  joinswapExternAmountIn(
    tokenIn: PromiseOrValue<string>,
    tokenAmountIn: PromiseOrValue<BigNumberish>,
    minPoolAmountOut: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  joinswapPoolAmountOut(
    tokenIn: PromiseOrValue<string>,
    poolAmountOut: PromiseOrValue<BigNumberish>,
    maxAmountIn: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  rebind(
    token: PromiseOrValue<string>,
    balance: PromiseOrValue<BigNumberish>,
    denorm: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setController(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExitFee(
    exitFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExitFeeCollector(
    newAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPublicSwap(
    public_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSwapFee(
    swapFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactAmountIn(
    tokenIn: PromiseOrValue<string>,
    tokenAmountIn: PromiseOrValue<BigNumberish>,
    tokenOut: PromiseOrValue<string>,
    minAmountOut: PromiseOrValue<BigNumberish>,
    maxPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactAmountOut(
    tokenIn: PromiseOrValue<string>,
    maxAmountIn: PromiseOrValue<BigNumberish>,
    tokenOut: PromiseOrValue<string>,
    tokenAmountOut: PromiseOrValue<BigNumberish>,
    maxPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unbind(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    NAME(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bind(
      token: PromiseOrValue<string>,
      balance: PromiseOrValue<BigNumberish>,
      denorm: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    calcInGivenOut(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcOutGivenIn(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcPoolInGivenSingleOut(
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcPoolOutGivenSingleIn(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSingleInGivenPoolOut(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      poolAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSingleOutGivenPoolIn(
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      poolAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSpotPrice(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseApproval(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    exitPool(
      poolAmountIn: PromiseOrValue<BigNumberish>,
      minAmountsOut: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    exitswapExternAmountOut(
      tokenOut: PromiseOrValue<string>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      maxPoolAmountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exitswapPoolAmountIn(
      tokenOut: PromiseOrValue<string>,
      poolAmountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalize(overrides?: CallOverrides): Promise<void>;

    getBalance(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getController(overrides?: CallOverrides): Promise<string>;

    getCurrentTokens(overrides?: CallOverrides): Promise<string[]>;

    getDenormalizedWeight(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExitFee(overrides?: CallOverrides): Promise<BigNumber>;

    getExitFeeCollector(overrides?: CallOverrides): Promise<string>;

    getFinalTokens(overrides?: CallOverrides): Promise<string[]>;

    getNormalizedWeight(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getSpotPrice(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpotPriceSansFee(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalDenormalizedWeight(overrides?: CallOverrides): Promise<BigNumber>;

    gulp(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseApproval(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isBound(
      t: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFinalized(overrides?: CallOverrides): Promise<boolean>;

    isPublicSwap(overrides?: CallOverrides): Promise<boolean>;

    joinPool(
      poolAmountOut: PromiseOrValue<BigNumberish>,
      maxAmountsIn: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    joinswapExternAmountIn(
      tokenIn: PromiseOrValue<string>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      minPoolAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinswapPoolAmountOut(
      tokenIn: PromiseOrValue<string>,
      poolAmountOut: PromiseOrValue<BigNumberish>,
      maxAmountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    rebind(
      token: PromiseOrValue<string>,
      balance: PromiseOrValue<BigNumberish>,
      denorm: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setController(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExitFee(
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExitFeeCollector(
      newAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPublicSwap(
      public_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapFee(
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactAmountIn(
      tokenIn: PromiseOrValue<string>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      tokenOut: PromiseOrValue<string>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenAmountOut: BigNumber;
        spotPriceAfter: BigNumber;
      }
    >;

    swapExactAmountOut(
      tokenIn: PromiseOrValue<string>,
      maxAmountIn: PromiseOrValue<BigNumberish>,
      tokenOut: PromiseOrValue<string>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenAmountIn: BigNumber;
        spotPriceAfter: BigNumber;
      }
    >;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unbind(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "LogCall(bytes4,address,bytes)"(
      sig?: PromiseOrValue<BytesLike> | null,
      caller?: PromiseOrValue<string> | null,
      data?: null
    ): LogCallEventFilter;
    LogCall(
      sig?: PromiseOrValue<BytesLike> | null,
      caller?: PromiseOrValue<string> | null,
      data?: null
    ): LogCallEventFilter;

    "LogExit(address,address,uint256)"(
      caller?: PromiseOrValue<string> | null,
      tokenOut?: PromiseOrValue<string> | null,
      tokenAmountOut?: null
    ): LogExitEventFilter;
    LogExit(
      caller?: PromiseOrValue<string> | null,
      tokenOut?: PromiseOrValue<string> | null,
      tokenAmountOut?: null
    ): LogExitEventFilter;

    "LogJoin(address,address,uint256)"(
      caller?: PromiseOrValue<string> | null,
      tokenIn?: PromiseOrValue<string> | null,
      tokenAmountIn?: null
    ): LogJoinEventFilter;
    LogJoin(
      caller?: PromiseOrValue<string> | null,
      tokenIn?: PromiseOrValue<string> | null,
      tokenAmountIn?: null
    ): LogJoinEventFilter;

    "LogSwap(address,address,address,uint256,uint256)"(
      caller?: PromiseOrValue<string> | null,
      tokenIn?: PromiseOrValue<string> | null,
      tokenOut?: PromiseOrValue<string> | null,
      tokenAmountIn?: null,
      tokenAmountOut?: null
    ): LogSwapEventFilter;
    LogSwap(
      caller?: PromiseOrValue<string> | null,
      tokenIn?: PromiseOrValue<string> | null,
      tokenOut?: PromiseOrValue<string> | null,
      tokenAmountIn?: null,
      tokenAmountOut?: null
    ): LogSwapEventFilter;

    "NewExitFee(address,address,uint256,uint256)"(
      pool?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
      oldFee?: null,
      newFee?: null
    ): NewExitFeeEventFilter;
    NewExitFee(
      pool?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
      oldFee?: null,
      newFee?: null
    ): NewExitFeeEventFilter;

    "NewExitFeeCollector(address,address,address,address)"(
      pool?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
      oldCollector?: null,
      newCollector?: null
    ): NewExitFeeCollectorEventFilter;
    NewExitFeeCollector(
      pool?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
      oldCollector?: null,
      newCollector?: null
    ): NewExitFeeCollectorEventFilter;

    "NewSwapFee(address,address,uint256,uint256)"(
      pool?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
      oldFee?: null,
      newFee?: null
    ): NewSwapFeeEventFilter;
    NewSwapFee(
      pool?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
      oldFee?: null,
      newFee?: null
    ): NewSwapFeeEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;

    "WeightChanged(address,address,address,uint256,uint256)"(
      pool?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      oldWeight?: null,
      newWeight?: null
    ): WeightChangedEventFilter;
    WeightChanged(
      pool?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      oldWeight?: null,
      newWeight?: null
    ): WeightChangedEventFilter;
  };

  estimateGas: {
    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bind(
      token: PromiseOrValue<string>,
      balance: PromiseOrValue<BigNumberish>,
      denorm: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calcInGivenOut(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcOutGivenIn(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcPoolInGivenSingleOut(
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcPoolOutGivenSingleIn(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSingleInGivenPoolOut(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      poolAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSingleOutGivenPoolIn(
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      poolAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSpotPrice(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseApproval(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exitPool(
      poolAmountIn: PromiseOrValue<BigNumberish>,
      minAmountsOut: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exitswapExternAmountOut(
      tokenOut: PromiseOrValue<string>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      maxPoolAmountIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exitswapPoolAmountIn(
      tokenOut: PromiseOrValue<string>,
      poolAmountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finalize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBalance(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getController(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getDenormalizedWeight(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExitFee(overrides?: CallOverrides): Promise<BigNumber>;

    getExitFeeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    getFinalTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getNormalizedWeight(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getSpotPrice(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpotPriceSansFee(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalDenormalizedWeight(overrides?: CallOverrides): Promise<BigNumber>;

    gulp(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseApproval(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isBound(
      t: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFinalized(overrides?: CallOverrides): Promise<BigNumber>;

    isPublicSwap(overrides?: CallOverrides): Promise<BigNumber>;

    joinPool(
      poolAmountOut: PromiseOrValue<BigNumberish>,
      maxAmountsIn: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    joinswapExternAmountIn(
      tokenIn: PromiseOrValue<string>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      minPoolAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    joinswapPoolAmountOut(
      tokenIn: PromiseOrValue<string>,
      poolAmountOut: PromiseOrValue<BigNumberish>,
      maxAmountIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    rebind(
      token: PromiseOrValue<string>,
      balance: PromiseOrValue<BigNumberish>,
      denorm: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setController(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExitFee(
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExitFeeCollector(
      newAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPublicSwap(
      public_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSwapFee(
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapExactAmountIn(
      tokenIn: PromiseOrValue<string>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      tokenOut: PromiseOrValue<string>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapExactAmountOut(
      tokenIn: PromiseOrValue<string>,
      maxAmountIn: PromiseOrValue<BigNumberish>,
      tokenOut: PromiseOrValue<string>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unbind(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bind(
      token: PromiseOrValue<string>,
      balance: PromiseOrValue<BigNumberish>,
      denorm: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calcInGivenOut(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcOutGivenIn(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcPoolInGivenSingleOut(
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcPoolOutGivenSingleIn(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcSingleInGivenPoolOut(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      poolAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcSingleOutGivenPoolIn(
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      poolAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcSpotPrice(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseApproval(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exitPool(
      poolAmountIn: PromiseOrValue<BigNumberish>,
      minAmountsOut: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exitswapExternAmountOut(
      tokenOut: PromiseOrValue<string>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      maxPoolAmountIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exitswapPoolAmountIn(
      tokenOut: PromiseOrValue<string>,
      poolAmountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finalize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBalance(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDenormalizedWeight(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExitFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExitFeeCollector(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFinalTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNormalizedWeight(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSpotPrice(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpotPriceSansFee(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalDenormalizedWeight(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gulp(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseApproval(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isBound(
      t: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFinalized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPublicSwap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    joinPool(
      poolAmountOut: PromiseOrValue<BigNumberish>,
      maxAmountsIn: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    joinswapExternAmountIn(
      tokenIn: PromiseOrValue<string>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      minPoolAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    joinswapPoolAmountOut(
      tokenIn: PromiseOrValue<string>,
      poolAmountOut: PromiseOrValue<BigNumberish>,
      maxAmountIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebind(
      token: PromiseOrValue<string>,
      balance: PromiseOrValue<BigNumberish>,
      denorm: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setController(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExitFee(
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExitFeeCollector(
      newAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPublicSwap(
      public_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSwapFee(
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactAmountIn(
      tokenIn: PromiseOrValue<string>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      tokenOut: PromiseOrValue<string>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactAmountOut(
      tokenIn: PromiseOrValue<string>,
      maxAmountIn: PromiseOrValue<BigNumberish>,
      tokenOut: PromiseOrValue<string>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unbind(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
