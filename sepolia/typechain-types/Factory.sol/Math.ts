/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface MathInterface extends utils.Interface {
  functions: {
    "calcInGivenOut(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcOutGivenIn(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcPoolInGivenSingleOut(uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcPoolOutGivenSingleIn(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcSingleInGivenPoolOut(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcSingleOutGivenPoolIn(uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcSpotPrice(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calcInGivenOut"
      | "calcOutGivenIn"
      | "calcPoolInGivenSingleOut"
      | "calcPoolOutGivenSingleIn"
      | "calcSingleInGivenPoolOut"
      | "calcSingleOutGivenPoolIn"
      | "calcSpotPrice"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calcInGivenOut",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcOutGivenIn",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcPoolInGivenSingleOut",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcPoolOutGivenSingleIn",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcSingleInGivenPoolOut",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcSingleOutGivenPoolIn",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcSpotPrice",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "calcInGivenOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcOutGivenIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcPoolInGivenSingleOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcPoolOutGivenSingleIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcSingleInGivenPoolOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcSingleOutGivenPoolIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcSpotPrice",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Math extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MathInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calcInGivenOut(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcOutGivenIn(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcPoolInGivenSingleOut(
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcPoolOutGivenSingleIn(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcSingleInGivenPoolOut(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      poolAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcSingleOutGivenPoolIn(
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      poolAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcSpotPrice(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  calcInGivenOut(
    tokenBalanceIn: PromiseOrValue<BigNumberish>,
    tokenWeightIn: PromiseOrValue<BigNumberish>,
    tokenBalanceOut: PromiseOrValue<BigNumberish>,
    tokenWeightOut: PromiseOrValue<BigNumberish>,
    tokenAmountOut: PromiseOrValue<BigNumberish>,
    swapFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcOutGivenIn(
    tokenBalanceIn: PromiseOrValue<BigNumberish>,
    tokenWeightIn: PromiseOrValue<BigNumberish>,
    tokenBalanceOut: PromiseOrValue<BigNumberish>,
    tokenWeightOut: PromiseOrValue<BigNumberish>,
    tokenAmountIn: PromiseOrValue<BigNumberish>,
    swapFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcPoolInGivenSingleOut(
    tokenBalanceOut: PromiseOrValue<BigNumberish>,
    tokenWeightOut: PromiseOrValue<BigNumberish>,
    poolSupply: PromiseOrValue<BigNumberish>,
    totalWeight: PromiseOrValue<BigNumberish>,
    tokenAmountOut: PromiseOrValue<BigNumberish>,
    swapFee: PromiseOrValue<BigNumberish>,
    exitFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcPoolOutGivenSingleIn(
    tokenBalanceIn: PromiseOrValue<BigNumberish>,
    tokenWeightIn: PromiseOrValue<BigNumberish>,
    poolSupply: PromiseOrValue<BigNumberish>,
    totalWeight: PromiseOrValue<BigNumberish>,
    tokenAmountIn: PromiseOrValue<BigNumberish>,
    swapFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcSingleInGivenPoolOut(
    tokenBalanceIn: PromiseOrValue<BigNumberish>,
    tokenWeightIn: PromiseOrValue<BigNumberish>,
    poolSupply: PromiseOrValue<BigNumberish>,
    totalWeight: PromiseOrValue<BigNumberish>,
    poolAmountOut: PromiseOrValue<BigNumberish>,
    swapFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcSingleOutGivenPoolIn(
    tokenBalanceOut: PromiseOrValue<BigNumberish>,
    tokenWeightOut: PromiseOrValue<BigNumberish>,
    poolSupply: PromiseOrValue<BigNumberish>,
    totalWeight: PromiseOrValue<BigNumberish>,
    poolAmountIn: PromiseOrValue<BigNumberish>,
    swapFee: PromiseOrValue<BigNumberish>,
    exitFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcSpotPrice(
    tokenBalanceIn: PromiseOrValue<BigNumberish>,
    tokenWeightIn: PromiseOrValue<BigNumberish>,
    tokenBalanceOut: PromiseOrValue<BigNumberish>,
    tokenWeightOut: PromiseOrValue<BigNumberish>,
    swapFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    calcInGivenOut(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcOutGivenIn(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcPoolInGivenSingleOut(
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcPoolOutGivenSingleIn(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSingleInGivenPoolOut(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      poolAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSingleOutGivenPoolIn(
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      poolAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSpotPrice(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    calcInGivenOut(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcOutGivenIn(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcPoolInGivenSingleOut(
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcPoolOutGivenSingleIn(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSingleInGivenPoolOut(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      poolAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSingleOutGivenPoolIn(
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      poolAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSpotPrice(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calcInGivenOut(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcOutGivenIn(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcPoolInGivenSingleOut(
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcPoolOutGivenSingleIn(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcSingleInGivenPoolOut(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      poolAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcSingleOutGivenPoolIn(
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      poolAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcSpotPrice(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
