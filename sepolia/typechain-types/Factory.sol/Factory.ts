/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface FactoryInterface extends utils.Interface {
  functions: {
    "crpFactory()": FunctionFragment;
    "getController()": FunctionFragment;
    "isPool(address)": FunctionFragment;
    "kacyToken()": FunctionFragment;
    "minimumKacy()": FunctionFragment;
    "newPool()": FunctionFragment;
    "newPool(string,string)": FunctionFragment;
    "setCRPFactory(address)": FunctionFragment;
    "setController(address)": FunctionFragment;
    "setKacyMinimum(uint256)": FunctionFragment;
    "setKacyToken(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "crpFactory"
      | "getController"
      | "isPool"
      | "kacyToken"
      | "minimumKacy"
      | "newPool()"
      | "newPool(string,string)"
      | "setCRPFactory"
      | "setController"
      | "setKacyMinimum"
      | "setKacyToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "crpFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "kacyToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minimumKacy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "newPool()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newPool(string,string)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCRPFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKacyMinimum",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKacyToken",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "crpFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kacyToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumKacy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newPool()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newPool(string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCRPFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKacyMinimum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKacyToken",
    data: BytesLike
  ): Result;

  events: {
    "LogNewPool(address,address)": EventFragment;
    "NewMinimum(address,uint256)": EventFragment;
    "NewTokenEnforced(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogNewPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMinimum"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTokenEnforced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface LogNewPoolEventObject {
  caller: string;
  pool: string;
}
export type LogNewPoolEvent = TypedEvent<
  [string, string],
  LogNewPoolEventObject
>;

export type LogNewPoolEventFilter = TypedEventFilter<LogNewPoolEvent>;

export interface NewMinimumEventObject {
  caller: string;
  percentage: BigNumber;
}
export type NewMinimumEvent = TypedEvent<
  [string, BigNumber],
  NewMinimumEventObject
>;

export type NewMinimumEventFilter = TypedEventFilter<NewMinimumEvent>;

export interface NewTokenEnforcedEventObject {
  caller: string;
  token: string;
}
export type NewTokenEnforcedEvent = TypedEvent<
  [string, string],
  NewTokenEnforcedEventObject
>;

export type NewTokenEnforcedEventFilter =
  TypedEventFilter<NewTokenEnforcedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Factory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    crpFactory(overrides?: CallOverrides): Promise<[string]>;

    getController(overrides?: CallOverrides): Promise<[string]>;

    isPool(
      b: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    kacyToken(overrides?: CallOverrides): Promise<[string]>;

    minimumKacy(overrides?: CallOverrides): Promise<[BigNumber]>;

    "newPool()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "newPool(string,string)"(
      tokenSymbol: PromiseOrValue<string>,
      tokenName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCRPFactory(
      factoryAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setController(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKacyMinimum(
      percent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKacyToken(
      newAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  crpFactory(overrides?: CallOverrides): Promise<string>;

  getController(overrides?: CallOverrides): Promise<string>;

  isPool(
    b: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  kacyToken(overrides?: CallOverrides): Promise<string>;

  minimumKacy(overrides?: CallOverrides): Promise<BigNumber>;

  "newPool()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "newPool(string,string)"(
    tokenSymbol: PromiseOrValue<string>,
    tokenName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCRPFactory(
    factoryAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setController(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKacyMinimum(
    percent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKacyToken(
    newAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    crpFactory(overrides?: CallOverrides): Promise<string>;

    getController(overrides?: CallOverrides): Promise<string>;

    isPool(
      b: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    kacyToken(overrides?: CallOverrides): Promise<string>;

    minimumKacy(overrides?: CallOverrides): Promise<BigNumber>;

    "newPool()"(overrides?: CallOverrides): Promise<string>;

    "newPool(string,string)"(
      tokenSymbol: PromiseOrValue<string>,
      tokenName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    setCRPFactory(
      factoryAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setController(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKacyMinimum(
      percent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKacyToken(
      newAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogNewPool(address,address)"(
      caller?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null
    ): LogNewPoolEventFilter;
    LogNewPool(
      caller?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null
    ): LogNewPoolEventFilter;

    "NewMinimum(address,uint256)"(
      caller?: PromiseOrValue<string> | null,
      percentage?: null
    ): NewMinimumEventFilter;
    NewMinimum(
      caller?: PromiseOrValue<string> | null,
      percentage?: null
    ): NewMinimumEventFilter;

    "NewTokenEnforced(address,address)"(
      caller?: PromiseOrValue<string> | null,
      token?: null
    ): NewTokenEnforcedEventFilter;
    NewTokenEnforced(
      caller?: PromiseOrValue<string> | null,
      token?: null
    ): NewTokenEnforcedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    crpFactory(overrides?: CallOverrides): Promise<BigNumber>;

    getController(overrides?: CallOverrides): Promise<BigNumber>;

    isPool(
      b: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kacyToken(overrides?: CallOverrides): Promise<BigNumber>;

    minimumKacy(overrides?: CallOverrides): Promise<BigNumber>;

    "newPool()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "newPool(string,string)"(
      tokenSymbol: PromiseOrValue<string>,
      tokenName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCRPFactory(
      factoryAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setController(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKacyMinimum(
      percent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKacyToken(
      newAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    crpFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPool(
      b: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kacyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumKacy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "newPool()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "newPool(string,string)"(
      tokenSymbol: PromiseOrValue<string>,
      tokenName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCRPFactory(
      factoryAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setController(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKacyMinimum(
      percent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKacyToken(
      newAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
