/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace ConfigurableRightsPool {
  export type PoolParamsStruct = {
    poolTokenSymbol: PromiseOrValue<string>;
    poolTokenName: PromiseOrValue<string>;
    constituentTokens: PromiseOrValue<string>[];
    tokenBalances: PromiseOrValue<BigNumberish>[];
    tokenWeights: PromiseOrValue<BigNumberish>[];
    swapFee: PromiseOrValue<BigNumberish>;
  };

  export type PoolParamsStructOutput = [
    string,
    string,
    string[],
    BigNumber[],
    BigNumber[],
    BigNumber
  ] & {
    poolTokenSymbol: string;
    poolTokenName: string;
    constituentTokens: string[];
    tokenBalances: BigNumber[];
    tokenWeights: BigNumber[];
    swapFee: BigNumber;
  };
}

export declare namespace RightsManager {
  export type RightsStruct = {
    canPauseSwapping: PromiseOrValue<boolean>;
    canChangeSwapFee: PromiseOrValue<boolean>;
    canChangeWeights: PromiseOrValue<boolean>;
    canAddRemoveTokens: PromiseOrValue<boolean>;
    canWhitelistLPs: PromiseOrValue<boolean>;
    canChangeCap: PromiseOrValue<boolean>;
  };

  export type RightsStructOutput = [
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean
  ] & {
    canPauseSwapping: boolean;
    canChangeSwapFee: boolean;
    canChangeWeights: boolean;
    canAddRemoveTokens: boolean;
    canWhitelistLPs: boolean;
    canChangeCap: boolean;
  };
}

export interface ConfigurableRightsPoolInterface extends utils.Interface {
  functions: {
    "NAME()": FunctionFragment;
    "addTokenTimeLockInBlocks()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "applyAddToken()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burnPoolShareFromLib(uint256)": FunctionFragment;
    "canProvideLiquidity(address)": FunctionFragment;
    "commitAddToken(address,uint256,uint256)": FunctionFragment;
    "coreFactory()": FunctionFragment;
    "corePool()": FunctionFragment;
    "createPool(uint256)": FunctionFragment;
    "createPool(uint256,uint256,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseApproval(address,uint256)": FunctionFragment;
    "exitPool(uint256,uint256[])": FunctionFragment;
    "exitswapExternAmountOut(address,uint256,uint256)": FunctionFragment;
    "exitswapPoolAmountIn(address,uint256,uint256)": FunctionFragment;
    "getController()": FunctionFragment;
    "getRightsManagerVersion()": FunctionFragment;
    "getSmartPoolManagerVersion()": FunctionFragment;
    "gradualUpdate()": FunctionFragment;
    "hasPermission(uint8)": FunctionFragment;
    "increaseApproval(address,uint256)": FunctionFragment;
    "joinPool(uint256,uint256[])": FunctionFragment;
    "joinswapExternAmountIn(address,uint256,uint256)": FunctionFragment;
    "joinswapPoolAmountOut(address,uint256,uint256)": FunctionFragment;
    "minimumWeightChangeBlockPeriod()": FunctionFragment;
    "mintPoolShareFromLib(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "newToken()": FunctionFragment;
    "pokeWeights()": FunctionFragment;
    "pullPoolShareFromLib(address,uint256)": FunctionFragment;
    "pushPoolShareFromLib(address,uint256)": FunctionFragment;
    "removeToken(address)": FunctionFragment;
    "removeWhitelistedLiquidityProvider(address)": FunctionFragment;
    "rights()": FunctionFragment;
    "setCap(uint256)": FunctionFragment;
    "setController(address)": FunctionFragment;
    "setExitFee(uint256)": FunctionFragment;
    "setExitFeeCollector(address)": FunctionFragment;
    "setPublicSwap(bool)": FunctionFragment;
    "setStrategy(address)": FunctionFragment;
    "setSwapFee(uint256)": FunctionFragment;
    "strategyUpdater()": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenCap()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "updateWeight(address,uint256)": FunctionFragment;
    "updateWeightsGradually(uint256[],uint256,uint256)": FunctionFragment;
    "whitelistLiquidityProvider(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "NAME"
      | "addTokenTimeLockInBlocks"
      | "allowance"
      | "applyAddToken"
      | "approve"
      | "balanceOf"
      | "burnPoolShareFromLib"
      | "canProvideLiquidity"
      | "commitAddToken"
      | "coreFactory"
      | "corePool"
      | "createPool(uint256)"
      | "createPool(uint256,uint256,uint256)"
      | "decimals"
      | "decreaseApproval"
      | "exitPool"
      | "exitswapExternAmountOut"
      | "exitswapPoolAmountIn"
      | "getController"
      | "getRightsManagerVersion"
      | "getSmartPoolManagerVersion"
      | "gradualUpdate"
      | "hasPermission"
      | "increaseApproval"
      | "joinPool"
      | "joinswapExternAmountIn"
      | "joinswapPoolAmountOut"
      | "minimumWeightChangeBlockPeriod"
      | "mintPoolShareFromLib"
      | "name"
      | "newToken"
      | "pokeWeights"
      | "pullPoolShareFromLib"
      | "pushPoolShareFromLib"
      | "removeToken"
      | "removeWhitelistedLiquidityProvider"
      | "rights"
      | "setCap"
      | "setController"
      | "setExitFee"
      | "setExitFeeCollector"
      | "setPublicSwap"
      | "setStrategy"
      | "setSwapFee"
      | "strategyUpdater"
      | "symbol"
      | "tokenCap"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "updateWeight"
      | "updateWeightsGradually"
      | "whitelistLiquidityProvider"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addTokenTimeLockInBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "applyAddToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "burnPoolShareFromLib",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "canProvideLiquidity",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "commitAddToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "coreFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "corePool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createPool(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createPool(uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseApproval",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPool",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exitswapExternAmountOut",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exitswapPoolAmountIn",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRightsManagerVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSmartPoolManagerVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gradualUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermission",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseApproval",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "joinPool",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "joinswapExternAmountIn",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "joinswapPoolAmountOut",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumWeightChangeBlockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintPoolShareFromLib",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "newToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pokeWeights",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pullPoolShareFromLib",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pushPoolShareFromLib",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhitelistedLiquidityProvider",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "rights", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setCap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExitFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExitFeeCollector",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicSwap",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategy",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyUpdater",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenCap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWeight",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWeightsGradually",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistLiquidityProvider",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addTokenTimeLockInBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "applyAddToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnPoolShareFromLib",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canProvideLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitAddToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coreFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "corePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createPool(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPool(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exitPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exitswapExternAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitswapPoolAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRightsManagerVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSmartPoolManagerVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gradualUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "joinswapExternAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinswapPoolAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumWeightChangeBlockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintPoolShareFromLib",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pokeWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pullPoolShareFromLib",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushPoolShareFromLib",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelistedLiquidityProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rights", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setExitFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setExitFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSwapFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "strategyUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWeightsGradually",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistLiquidityProvider",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "CapChanged(address,uint256,uint256)": EventFragment;
    "LogCall(bytes4,address,bytes)": EventFragment;
    "LogExit(address,address,uint256)": EventFragment;
    "LogJoin(address,address,uint256)": EventFragment;
    "NewStrategy(address,address,address)": EventFragment;
    "NewTokenCommitted(address,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CapChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogCall"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogExit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogJoin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewStrategy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTokenCommitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface CapChangedEventObject {
  caller: string;
  oldCap: BigNumber;
  newCap: BigNumber;
}
export type CapChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  CapChangedEventObject
>;

export type CapChangedEventFilter = TypedEventFilter<CapChangedEvent>;

export interface LogCallEventObject {
  sig: string;
  caller: string;
  data: string;
}
export type LogCallEvent = TypedEvent<
  [string, string, string],
  LogCallEventObject
>;

export type LogCallEventFilter = TypedEventFilter<LogCallEvent>;

export interface LogExitEventObject {
  caller: string;
  tokenOut: string;
  tokenAmountOut: BigNumber;
}
export type LogExitEvent = TypedEvent<
  [string, string, BigNumber],
  LogExitEventObject
>;

export type LogExitEventFilter = TypedEventFilter<LogExitEvent>;

export interface LogJoinEventObject {
  caller: string;
  tokenIn: string;
  tokenAmountIn: BigNumber;
}
export type LogJoinEvent = TypedEvent<
  [string, string, BigNumber],
  LogJoinEventObject
>;

export type LogJoinEventFilter = TypedEventFilter<LogJoinEvent>;

export interface NewStrategyEventObject {
  caller: string;
  pool: string;
  newAddr: string;
}
export type NewStrategyEvent = TypedEvent<
  [string, string, string],
  NewStrategyEventObject
>;

export type NewStrategyEventFilter = TypedEventFilter<NewStrategyEvent>;

export interface NewTokenCommittedEventObject {
  caller: string;
  pool: string;
  token: string;
}
export type NewTokenCommittedEvent = TypedEvent<
  [string, string, string],
  NewTokenCommittedEventObject
>;

export type NewTokenCommittedEventFilter =
  TypedEventFilter<NewTokenCommittedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface ConfigurableRightsPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConfigurableRightsPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NAME(overrides?: CallOverrides): Promise<[string]>;

    addTokenTimeLockInBlocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    applyAddToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    burnPoolShareFromLib(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    canProvideLiquidity(
      provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    commitAddToken(
      token: PromiseOrValue<string>,
      balance: PromiseOrValue<BigNumberish>,
      denormalizedWeight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    coreFactory(overrides?: CallOverrides): Promise<[string]>;

    corePool(overrides?: CallOverrides): Promise<[string]>;

    "createPool(uint256)"(
      initialSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "createPool(uint256,uint256,uint256)"(
      initialSupply: PromiseOrValue<BigNumberish>,
      minimumWeightChangeBlockPeriodParam: PromiseOrValue<BigNumberish>,
      addTokenTimeLockInBlocksParam: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseApproval(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exitPool(
      poolAmountIn: PromiseOrValue<BigNumberish>,
      minAmountsOut: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exitswapExternAmountOut(
      tokenOut: PromiseOrValue<string>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      maxPoolAmountIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exitswapPoolAmountIn(
      tokenOut: PromiseOrValue<string>,
      poolAmountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getController(overrides?: CallOverrides): Promise<[string]>;

    getRightsManagerVersion(overrides?: CallOverrides): Promise<[string]>;

    getSmartPoolManagerVersion(overrides?: CallOverrides): Promise<[string]>;

    gradualUpdate(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { startBlock: BigNumber; endBlock: BigNumber }
    >;

    hasPermission(
      permission: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    increaseApproval(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    joinPool(
      poolAmountOut: PromiseOrValue<BigNumberish>,
      maxAmountsIn: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    joinswapExternAmountIn(
      tokenIn: PromiseOrValue<string>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      minPoolAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    joinswapPoolAmountOut(
      tokenIn: PromiseOrValue<string>,
      poolAmountOut: PromiseOrValue<BigNumberish>,
      maxAmountIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    minimumWeightChangeBlockPeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mintPoolShareFromLib(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    newToken(
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, BigNumber, BigNumber] & {
        isCommitted: boolean;
        addr: string;
        commitBlock: BigNumber;
        denorm: BigNumber;
        balance: BigNumber;
      }
    >;

    pokeWeights(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pullPoolShareFromLib(
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pushPoolShareFromLib(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeWhitelistedLiquidityProvider(
      provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rights(
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, boolean, boolean, boolean] & {
        canPauseSwapping: boolean;
        canChangeSwapFee: boolean;
        canChangeWeights: boolean;
        canAddRemoveTokens: boolean;
        canWhitelistLPs: boolean;
        canChangeCap: boolean;
      }
    >;

    setCap(
      newCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setController(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExitFee(
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExitFeeCollector(
      feeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPublicSwap(
      publicSwap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStrategy(
      updaterAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSwapFee(
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    strategyUpdater(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateWeight(
      token: PromiseOrValue<string>,
      newWeight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateWeightsGradually(
      newWeights: PromiseOrValue<BigNumberish>[],
      startBlock: PromiseOrValue<BigNumberish>,
      endBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelistLiquidityProvider(
      provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  NAME(overrides?: CallOverrides): Promise<string>;

  addTokenTimeLockInBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  applyAddToken(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burnPoolShareFromLib(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  canProvideLiquidity(
    provider: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  commitAddToken(
    token: PromiseOrValue<string>,
    balance: PromiseOrValue<BigNumberish>,
    denormalizedWeight: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  coreFactory(overrides?: CallOverrides): Promise<string>;

  corePool(overrides?: CallOverrides): Promise<string>;

  "createPool(uint256)"(
    initialSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "createPool(uint256,uint256,uint256)"(
    initialSupply: PromiseOrValue<BigNumberish>,
    minimumWeightChangeBlockPeriodParam: PromiseOrValue<BigNumberish>,
    addTokenTimeLockInBlocksParam: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseApproval(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exitPool(
    poolAmountIn: PromiseOrValue<BigNumberish>,
    minAmountsOut: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exitswapExternAmountOut(
    tokenOut: PromiseOrValue<string>,
    tokenAmountOut: PromiseOrValue<BigNumberish>,
    maxPoolAmountIn: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exitswapPoolAmountIn(
    tokenOut: PromiseOrValue<string>,
    poolAmountIn: PromiseOrValue<BigNumberish>,
    minAmountOut: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getController(overrides?: CallOverrides): Promise<string>;

  getRightsManagerVersion(overrides?: CallOverrides): Promise<string>;

  getSmartPoolManagerVersion(overrides?: CallOverrides): Promise<string>;

  gradualUpdate(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { startBlock: BigNumber; endBlock: BigNumber }
  >;

  hasPermission(
    permission: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  increaseApproval(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  joinPool(
    poolAmountOut: PromiseOrValue<BigNumberish>,
    maxAmountsIn: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  joinswapExternAmountIn(
    tokenIn: PromiseOrValue<string>,
    tokenAmountIn: PromiseOrValue<BigNumberish>,
    minPoolAmountOut: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  joinswapPoolAmountOut(
    tokenIn: PromiseOrValue<string>,
    poolAmountOut: PromiseOrValue<BigNumberish>,
    maxAmountIn: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  minimumWeightChangeBlockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  mintPoolShareFromLib(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  newToken(
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, BigNumber, BigNumber, BigNumber] & {
      isCommitted: boolean;
      addr: string;
      commitBlock: BigNumber;
      denorm: BigNumber;
      balance: BigNumber;
    }
  >;

  pokeWeights(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pullPoolShareFromLib(
    from: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pushPoolShareFromLib(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeToken(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeWhitelistedLiquidityProvider(
    provider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rights(
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, boolean, boolean, boolean, boolean] & {
      canPauseSwapping: boolean;
      canChangeSwapFee: boolean;
      canChangeWeights: boolean;
      canAddRemoveTokens: boolean;
      canWhitelistLPs: boolean;
      canChangeCap: boolean;
    }
  >;

  setCap(
    newCap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setController(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExitFee(
    exitFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExitFeeCollector(
    feeCollector: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPublicSwap(
    publicSwap: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStrategy(
    updaterAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSwapFee(
    swapFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  strategyUpdater(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenCap(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateWeight(
    token: PromiseOrValue<string>,
    newWeight: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateWeightsGradually(
    newWeights: PromiseOrValue<BigNumberish>[],
    startBlock: PromiseOrValue<BigNumberish>,
    endBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelistLiquidityProvider(
    provider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    NAME(overrides?: CallOverrides): Promise<string>;

    addTokenTimeLockInBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyAddToken(overrides?: CallOverrides): Promise<void>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnPoolShareFromLib(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    canProvideLiquidity(
      provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    commitAddToken(
      token: PromiseOrValue<string>,
      balance: PromiseOrValue<BigNumberish>,
      denormalizedWeight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    coreFactory(overrides?: CallOverrides): Promise<string>;

    corePool(overrides?: CallOverrides): Promise<string>;

    "createPool(uint256)"(
      initialSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "createPool(uint256,uint256,uint256)"(
      initialSupply: PromiseOrValue<BigNumberish>,
      minimumWeightChangeBlockPeriodParam: PromiseOrValue<BigNumberish>,
      addTokenTimeLockInBlocksParam: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseApproval(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    exitPool(
      poolAmountIn: PromiseOrValue<BigNumberish>,
      minAmountsOut: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    exitswapExternAmountOut(
      tokenOut: PromiseOrValue<string>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      maxPoolAmountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exitswapPoolAmountIn(
      tokenOut: PromiseOrValue<string>,
      poolAmountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getController(overrides?: CallOverrides): Promise<string>;

    getRightsManagerVersion(overrides?: CallOverrides): Promise<string>;

    getSmartPoolManagerVersion(overrides?: CallOverrides): Promise<string>;

    gradualUpdate(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { startBlock: BigNumber; endBlock: BigNumber }
    >;

    hasPermission(
      permission: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseApproval(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    joinPool(
      poolAmountOut: PromiseOrValue<BigNumberish>,
      maxAmountsIn: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    joinswapExternAmountIn(
      tokenIn: PromiseOrValue<string>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      minPoolAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinswapPoolAmountOut(
      tokenIn: PromiseOrValue<string>,
      poolAmountOut: PromiseOrValue<BigNumberish>,
      maxAmountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumWeightChangeBlockPeriod(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintPoolShareFromLib(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    newToken(
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, BigNumber, BigNumber] & {
        isCommitted: boolean;
        addr: string;
        commitBlock: BigNumber;
        denorm: BigNumber;
        balance: BigNumber;
      }
    >;

    pokeWeights(overrides?: CallOverrides): Promise<void>;

    pullPoolShareFromLib(
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    pushPoolShareFromLib(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeWhitelistedLiquidityProvider(
      provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rights(
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, boolean, boolean, boolean] & {
        canPauseSwapping: boolean;
        canChangeSwapFee: boolean;
        canChangeWeights: boolean;
        canAddRemoveTokens: boolean;
        canWhitelistLPs: boolean;
        canChangeCap: boolean;
      }
    >;

    setCap(
      newCap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setController(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExitFee(
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExitFeeCollector(
      feeCollector: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPublicSwap(
      publicSwap: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategy(
      updaterAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapFee(
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    strategyUpdater(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenCap(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateWeight(
      token: PromiseOrValue<string>,
      newWeight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWeightsGradually(
      newWeights: PromiseOrValue<BigNumberish>[],
      startBlock: PromiseOrValue<BigNumberish>,
      endBlock: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistLiquidityProvider(
      provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "CapChanged(address,uint256,uint256)"(
      caller?: PromiseOrValue<string> | null,
      oldCap?: null,
      newCap?: null
    ): CapChangedEventFilter;
    CapChanged(
      caller?: PromiseOrValue<string> | null,
      oldCap?: null,
      newCap?: null
    ): CapChangedEventFilter;

    "LogCall(bytes4,address,bytes)"(
      sig?: PromiseOrValue<BytesLike> | null,
      caller?: PromiseOrValue<string> | null,
      data?: null
    ): LogCallEventFilter;
    LogCall(
      sig?: PromiseOrValue<BytesLike> | null,
      caller?: PromiseOrValue<string> | null,
      data?: null
    ): LogCallEventFilter;

    "LogExit(address,address,uint256)"(
      caller?: PromiseOrValue<string> | null,
      tokenOut?: PromiseOrValue<string> | null,
      tokenAmountOut?: null
    ): LogExitEventFilter;
    LogExit(
      caller?: PromiseOrValue<string> | null,
      tokenOut?: PromiseOrValue<string> | null,
      tokenAmountOut?: null
    ): LogExitEventFilter;

    "LogJoin(address,address,uint256)"(
      caller?: PromiseOrValue<string> | null,
      tokenIn?: PromiseOrValue<string> | null,
      tokenAmountIn?: null
    ): LogJoinEventFilter;
    LogJoin(
      caller?: PromiseOrValue<string> | null,
      tokenIn?: PromiseOrValue<string> | null,
      tokenAmountIn?: null
    ): LogJoinEventFilter;

    "NewStrategy(address,address,address)"(
      caller?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      newAddr?: PromiseOrValue<string> | null
    ): NewStrategyEventFilter;
    NewStrategy(
      caller?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      newAddr?: PromiseOrValue<string> | null
    ): NewStrategyEventFilter;

    "NewTokenCommitted(address,address,address)"(
      caller?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null
    ): NewTokenCommittedEventFilter;
    NewTokenCommitted(
      caller?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null
    ): NewTokenCommittedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    addTokenTimeLockInBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyAddToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnPoolShareFromLib(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    canProvideLiquidity(
      provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    commitAddToken(
      token: PromiseOrValue<string>,
      balance: PromiseOrValue<BigNumberish>,
      denormalizedWeight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    coreFactory(overrides?: CallOverrides): Promise<BigNumber>;

    corePool(overrides?: CallOverrides): Promise<BigNumber>;

    "createPool(uint256)"(
      initialSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "createPool(uint256,uint256,uint256)"(
      initialSupply: PromiseOrValue<BigNumberish>,
      minimumWeightChangeBlockPeriodParam: PromiseOrValue<BigNumberish>,
      addTokenTimeLockInBlocksParam: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseApproval(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exitPool(
      poolAmountIn: PromiseOrValue<BigNumberish>,
      minAmountsOut: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exitswapExternAmountOut(
      tokenOut: PromiseOrValue<string>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      maxPoolAmountIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exitswapPoolAmountIn(
      tokenOut: PromiseOrValue<string>,
      poolAmountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getController(overrides?: CallOverrides): Promise<BigNumber>;

    getRightsManagerVersion(overrides?: CallOverrides): Promise<BigNumber>;

    getSmartPoolManagerVersion(overrides?: CallOverrides): Promise<BigNumber>;

    gradualUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    hasPermission(
      permission: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseApproval(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    joinPool(
      poolAmountOut: PromiseOrValue<BigNumberish>,
      maxAmountsIn: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    joinswapExternAmountIn(
      tokenIn: PromiseOrValue<string>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      minPoolAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    joinswapPoolAmountOut(
      tokenIn: PromiseOrValue<string>,
      poolAmountOut: PromiseOrValue<BigNumberish>,
      maxAmountIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    minimumWeightChangeBlockPeriod(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintPoolShareFromLib(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    newToken(overrides?: CallOverrides): Promise<BigNumber>;

    pokeWeights(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pullPoolShareFromLib(
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pushPoolShareFromLib(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeWhitelistedLiquidityProvider(
      provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rights(overrides?: CallOverrides): Promise<BigNumber>;

    setCap(
      newCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setController(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExitFee(
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExitFeeCollector(
      feeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPublicSwap(
      publicSwap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStrategy(
      updaterAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSwapFee(
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    strategyUpdater(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenCap(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateWeight(
      token: PromiseOrValue<string>,
      newWeight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateWeightsGradually(
      newWeights: PromiseOrValue<BigNumberish>[],
      startBlock: PromiseOrValue<BigNumberish>,
      endBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelistLiquidityProvider(
      provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addTokenTimeLockInBlocks(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    applyAddToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnPoolShareFromLib(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    canProvideLiquidity(
      provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    commitAddToken(
      token: PromiseOrValue<string>,
      balance: PromiseOrValue<BigNumberish>,
      denormalizedWeight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    coreFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    corePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "createPool(uint256)"(
      initialSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "createPool(uint256,uint256,uint256)"(
      initialSupply: PromiseOrValue<BigNumberish>,
      minimumWeightChangeBlockPeriodParam: PromiseOrValue<BigNumberish>,
      addTokenTimeLockInBlocksParam: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseApproval(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exitPool(
      poolAmountIn: PromiseOrValue<BigNumberish>,
      minAmountsOut: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exitswapExternAmountOut(
      tokenOut: PromiseOrValue<string>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      maxPoolAmountIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exitswapPoolAmountIn(
      tokenOut: PromiseOrValue<string>,
      poolAmountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRightsManagerVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSmartPoolManagerVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gradualUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasPermission(
      permission: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseApproval(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    joinPool(
      poolAmountOut: PromiseOrValue<BigNumberish>,
      maxAmountsIn: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    joinswapExternAmountIn(
      tokenIn: PromiseOrValue<string>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      minPoolAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    joinswapPoolAmountOut(
      tokenIn: PromiseOrValue<string>,
      poolAmountOut: PromiseOrValue<BigNumberish>,
      maxAmountIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    minimumWeightChangeBlockPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintPoolShareFromLib(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pokeWeights(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pullPoolShareFromLib(
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pushPoolShareFromLib(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeWhitelistedLiquidityProvider(
      provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rights(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCap(
      newCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setController(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExitFee(
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExitFeeCollector(
      feeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPublicSwap(
      publicSwap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStrategy(
      updaterAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSwapFee(
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    strategyUpdater(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateWeight(
      token: PromiseOrValue<string>,
      newWeight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateWeightsGradually(
      newWeights: PromiseOrValue<BigNumberish>[],
      startBlock: PromiseOrValue<BigNumberish>,
      endBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelistLiquidityProvider(
      provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
