/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace RightsManager {
  export type RightsStruct = {
    canPauseSwapping: PromiseOrValue<boolean>;
    canChangeSwapFee: PromiseOrValue<boolean>;
    canChangeWeights: PromiseOrValue<boolean>;
    canAddRemoveTokens: PromiseOrValue<boolean>;
    canWhitelistLPs: PromiseOrValue<boolean>;
    canChangeCap: PromiseOrValue<boolean>;
  };

  export type RightsStructOutput = [
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean
  ] & {
    canPauseSwapping: boolean;
    canChangeSwapFee: boolean;
    canChangeWeights: boolean;
    canAddRemoveTokens: boolean;
    canWhitelistLPs: boolean;
    canChangeCap: boolean;
  };
}

export interface RightsManagerInterface extends utils.Interface {
  functions: {
    "DEFAULT_CAN_ADD_REMOVE_TOKENS()": FunctionFragment;
    "DEFAULT_CAN_CHANGE_CAP()": FunctionFragment;
    "DEFAULT_CAN_CHANGE_SWAP_FEE()": FunctionFragment;
    "DEFAULT_CAN_CHANGE_WEIGHTS()": FunctionFragment;
    "DEFAULT_CAN_PAUSE_SWAPPING()": FunctionFragment;
    "DEFAULT_CAN_WHITELIST_LPS()": FunctionFragment;
    "constructRights(bool[])": FunctionFragment;
    "convertRights((bool,bool,bool,bool,bool,bool))": FunctionFragment;
    "hasPermission((bool,bool,bool,bool,bool,bool),uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_CAN_ADD_REMOVE_TOKENS"
      | "DEFAULT_CAN_CHANGE_CAP"
      | "DEFAULT_CAN_CHANGE_SWAP_FEE"
      | "DEFAULT_CAN_CHANGE_WEIGHTS"
      | "DEFAULT_CAN_PAUSE_SWAPPING"
      | "DEFAULT_CAN_WHITELIST_LPS"
      | "constructRights"
      | "convertRights"
      | "hasPermission"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_CAN_ADD_REMOVE_TOKENS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_CAN_CHANGE_CAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_CAN_CHANGE_SWAP_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_CAN_CHANGE_WEIGHTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_CAN_PAUSE_SWAPPING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_CAN_WHITELIST_LPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "constructRights",
    values: [PromiseOrValue<boolean>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "convertRights",
    values: [RightsManager.RightsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermission",
    values: [RightsManager.RightsStruct, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_CAN_ADD_REMOVE_TOKENS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_CAN_CHANGE_CAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_CAN_CHANGE_SWAP_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_CAN_CHANGE_WEIGHTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_CAN_PAUSE_SWAPPING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_CAN_WHITELIST_LPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "constructRights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertRights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission",
    data: BytesLike
  ): Result;

  events: {};
}

export interface RightsManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RightsManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_CAN_ADD_REMOVE_TOKENS(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    DEFAULT_CAN_CHANGE_CAP(overrides?: CallOverrides): Promise<[boolean]>;

    DEFAULT_CAN_CHANGE_SWAP_FEE(overrides?: CallOverrides): Promise<[boolean]>;

    DEFAULT_CAN_CHANGE_WEIGHTS(overrides?: CallOverrides): Promise<[boolean]>;

    DEFAULT_CAN_PAUSE_SWAPPING(overrides?: CallOverrides): Promise<[boolean]>;

    DEFAULT_CAN_WHITELIST_LPS(overrides?: CallOverrides): Promise<[boolean]>;

    constructRights(
      a: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<[RightsManager.RightsStructOutput]>;

    convertRights(
      rights: RightsManager.RightsStruct,
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;

    hasPermission(
      self: RightsManager.RightsStruct,
      permission: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  DEFAULT_CAN_ADD_REMOVE_TOKENS(overrides?: CallOverrides): Promise<boolean>;

  DEFAULT_CAN_CHANGE_CAP(overrides?: CallOverrides): Promise<boolean>;

  DEFAULT_CAN_CHANGE_SWAP_FEE(overrides?: CallOverrides): Promise<boolean>;

  DEFAULT_CAN_CHANGE_WEIGHTS(overrides?: CallOverrides): Promise<boolean>;

  DEFAULT_CAN_PAUSE_SWAPPING(overrides?: CallOverrides): Promise<boolean>;

  DEFAULT_CAN_WHITELIST_LPS(overrides?: CallOverrides): Promise<boolean>;

  constructRights(
    a: PromiseOrValue<boolean>[],
    overrides?: CallOverrides
  ): Promise<RightsManager.RightsStructOutput>;

  convertRights(
    rights: RightsManager.RightsStruct,
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  hasPermission(
    self: RightsManager.RightsStruct,
    permission: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    DEFAULT_CAN_ADD_REMOVE_TOKENS(overrides?: CallOverrides): Promise<boolean>;

    DEFAULT_CAN_CHANGE_CAP(overrides?: CallOverrides): Promise<boolean>;

    DEFAULT_CAN_CHANGE_SWAP_FEE(overrides?: CallOverrides): Promise<boolean>;

    DEFAULT_CAN_CHANGE_WEIGHTS(overrides?: CallOverrides): Promise<boolean>;

    DEFAULT_CAN_PAUSE_SWAPPING(overrides?: CallOverrides): Promise<boolean>;

    DEFAULT_CAN_WHITELIST_LPS(overrides?: CallOverrides): Promise<boolean>;

    constructRights(
      a: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<RightsManager.RightsStructOutput>;

    convertRights(
      rights: RightsManager.RightsStruct,
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    hasPermission(
      self: RightsManager.RightsStruct,
      permission: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    DEFAULT_CAN_ADD_REMOVE_TOKENS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    DEFAULT_CAN_CHANGE_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_CAN_CHANGE_SWAP_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_CAN_CHANGE_WEIGHTS(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_CAN_PAUSE_SWAPPING(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_CAN_WHITELIST_LPS(overrides?: CallOverrides): Promise<BigNumber>;

    constructRights(
      a: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertRights(
      rights: RightsManager.RightsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPermission(
      self: RightsManager.RightsStruct,
      permission: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_CAN_ADD_REMOVE_TOKENS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_CAN_CHANGE_CAP(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_CAN_CHANGE_SWAP_FEE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_CAN_CHANGE_WEIGHTS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_CAN_PAUSE_SWAPPING(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_CAN_WHITELIST_LPS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    constructRights(
      a: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertRights(
      rights: RightsManager.RightsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasPermission(
      self: RightsManager.RightsStruct,
      permission: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
