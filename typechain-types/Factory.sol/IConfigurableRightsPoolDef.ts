/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface IConfigurableRightsPoolDefInterface extends utils.Interface {
  functions: {
    "applyAddToken()": FunctionFragment;
    "burnPoolShareFromLib(uint256)": FunctionFragment;
    "commitAddToken(address,uint256,uint256)": FunctionFragment;
    "corePool()": FunctionFragment;
    "mintPoolShareFromLib(uint256)": FunctionFragment;
    "pokeWeights()": FunctionFragment;
    "pullPoolShareFromLib(address,uint256)": FunctionFragment;
    "pushPoolShareFromLib(address,uint256)": FunctionFragment;
    "removeToken(address)": FunctionFragment;
    "updateWeight(address,uint256)": FunctionFragment;
    "updateWeightsGradually(uint256[],uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "applyAddToken"
      | "burnPoolShareFromLib"
      | "commitAddToken"
      | "corePool"
      | "mintPoolShareFromLib"
      | "pokeWeights"
      | "pullPoolShareFromLib"
      | "pushPoolShareFromLib"
      | "removeToken"
      | "updateWeight"
      | "updateWeightsGradually"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "applyAddToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burnPoolShareFromLib",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "commitAddToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "corePool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintPoolShareFromLib",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pokeWeights",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pullPoolShareFromLib",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pushPoolShareFromLib",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWeight",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWeightsGradually",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "applyAddToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnPoolShareFromLib",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitAddToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "corePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintPoolShareFromLib",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pokeWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pullPoolShareFromLib",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushPoolShareFromLib",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWeightsGradually",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IConfigurableRightsPoolDef extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IConfigurableRightsPoolDefInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    applyAddToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnPoolShareFromLib(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    commitAddToken(
      token: PromiseOrValue<string>,
      balance: PromiseOrValue<BigNumberish>,
      denormalizedWeight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    corePool(overrides?: CallOverrides): Promise<[string]>;

    mintPoolShareFromLib(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pokeWeights(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pullPoolShareFromLib(
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pushPoolShareFromLib(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateWeight(
      token: PromiseOrValue<string>,
      newWeight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateWeightsGradually(
      newWeights: PromiseOrValue<BigNumberish>[],
      startBlock: PromiseOrValue<BigNumberish>,
      endBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  applyAddToken(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnPoolShareFromLib(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  commitAddToken(
    token: PromiseOrValue<string>,
    balance: PromiseOrValue<BigNumberish>,
    denormalizedWeight: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  corePool(overrides?: CallOverrides): Promise<string>;

  mintPoolShareFromLib(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pokeWeights(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pullPoolShareFromLib(
    from: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pushPoolShareFromLib(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeToken(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateWeight(
    token: PromiseOrValue<string>,
    newWeight: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateWeightsGradually(
    newWeights: PromiseOrValue<BigNumberish>[],
    startBlock: PromiseOrValue<BigNumberish>,
    endBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    applyAddToken(overrides?: CallOverrides): Promise<void>;

    burnPoolShareFromLib(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    commitAddToken(
      token: PromiseOrValue<string>,
      balance: PromiseOrValue<BigNumberish>,
      denormalizedWeight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    corePool(overrides?: CallOverrides): Promise<string>;

    mintPoolShareFromLib(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    pokeWeights(overrides?: CallOverrides): Promise<void>;

    pullPoolShareFromLib(
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    pushPoolShareFromLib(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWeight(
      token: PromiseOrValue<string>,
      newWeight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWeightsGradually(
      newWeights: PromiseOrValue<BigNumberish>[],
      startBlock: PromiseOrValue<BigNumberish>,
      endBlock: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    applyAddToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnPoolShareFromLib(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    commitAddToken(
      token: PromiseOrValue<string>,
      balance: PromiseOrValue<BigNumberish>,
      denormalizedWeight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    corePool(overrides?: CallOverrides): Promise<BigNumber>;

    mintPoolShareFromLib(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pokeWeights(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pullPoolShareFromLib(
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pushPoolShareFromLib(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateWeight(
      token: PromiseOrValue<string>,
      newWeight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateWeightsGradually(
      newWeights: PromiseOrValue<BigNumberish>[],
      startBlock: PromiseOrValue<BigNumberish>,
      endBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    applyAddToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnPoolShareFromLib(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    commitAddToken(
      token: PromiseOrValue<string>,
      balance: PromiseOrValue<BigNumberish>,
      denormalizedWeight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    corePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintPoolShareFromLib(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pokeWeights(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pullPoolShareFromLib(
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pushPoolShareFromLib(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateWeight(
      token: PromiseOrValue<string>,
      newWeight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateWeightsGradually(
      newWeights: PromiseOrValue<BigNumberish>[],
      startBlock: PromiseOrValue<BigNumberish>,
      endBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
