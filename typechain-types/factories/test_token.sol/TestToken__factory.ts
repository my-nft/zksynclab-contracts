/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  TestToken,
  TestTokenInterface,
} from "../../test_token.sol/TestToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "MaxCumulativeBalanceExceeded",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getController",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getMaxCumulativeBalanceForAccount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "remainingAllowedBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "setController",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000fa638038062000fa6833981016040819052620000349162000170565b600080546001600160a01b03191633179055600662000054838262000269565b50600762000063828262000269565b50506008805460ff19166012179055503360009081526001602052604090206aa56fa5b99019a5c800000090556c054e739ef2d4e77128a29000006004554360055562000335565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620000d357600080fd5b81516001600160401b0380821115620000f057620000f0620000ab565b604051601f8301601f19908116603f011681019082821181831017156200011b576200011b620000ab565b816040528381526020925086838588010111156200013857600080fd5b600091505b838210156200015c57858201830151818301840152908201906200013d565b600093810190920192909252949350505050565b600080604083850312156200018457600080fd5b82516001600160401b03808211156200019c57600080fd5b620001aa86838701620000c1565b93506020850151915080821115620001c157600080fd5b50620001d085828601620000c1565b9150509250929050565b600181811c90821680620001ef57607f821691505b6020821081036200021057634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200026457600081815260208120601f850160051c810160208610156200023f5750805b601f850160051c820191505b8181101562000260578281556001016200024b565b5050505b505050565b81516001600160401b03811115620002855762000285620000ab565b6200029d81620002968454620001da565b8462000216565b602080601f831160018114620002d55760008415620002bc5750858301515b600019600386901b1c1916600185901b17855562000260565b600085815260208120601f198616915b828110156200030657888601518255948401946001909101908401620002e5565b5085821015620003255787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610c6180620003456000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806370a0823111610097578063a9059cbb11610066578063a9059cbb146101fc578063dd62ed3e1461020f578063f45e907e14610248578063fee406d51461025b57600080fd5b806370a08231146101a357806392eefe9b146101cc57806395d89b41146101e1578063a457c2d7146101e957600080fd5b806323b872dd116100d357806323b872dd1461014d5780633018205f14610160578063313ce5671461017b578063395093511461019057600080fd5b806306fdde03146100fa578063095ea7b31461011857806318160ddd1461013b575b600080fd5b61010261026e565b60405161010f91906109ef565b60405180910390f35b61012b610126366004610a59565b610300565b604051901515815260200161010f565b6004545b60405190815260200161010f565b61012b61015b366004610a83565b610317565b6000546040516001600160a01b03909116815260200161010f565b60085460405160ff909116815260200161010f565b61012b61019e366004610a59565b610368565b61013f6101b1366004610abf565b6001600160a01b031660009081526001602052604090205490565b6101df6101da366004610abf565b61039e565b005b610102610496565b61012b6101f7366004610a59565b6104a5565b61012b61020a366004610a59565b6104db565b61013f61021d366004610ada565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b61013f610256366004610abf565b6104e8565b61013f610269366004610abf565b61054b565b60606006805461027d90610b0d565b80601f01602080910402602001604051908101604052809291908181526020018280546102a990610b0d565b80156102f65780601f106102cb576101008083540402835291602001916102f6565b820191906000526020600020905b8154815290600101906020018083116102d957829003601f168201915b5050505050905090565b600061030d338484610696565b5060015b92915050565b60006103248484846107bb565b6001600160a01b03841660009081526003602090815260408083203380855292529091205461035e918691610359908661097f565b610696565b5060019392505050565b3360008181526003602090815260408083206001600160a01b0387168452909152812054909161030d918590610359908661099b565b6000546001600160a01b031633146103f25760405162461bcd60e51b815260206004820152601260248201527122a9292fa727aa2fa1a7a72a2927a62622a960711b60448201526064015b60405180910390fd5b6001600160a01b03811661043b5760405162461bcd60e51b815260206004820152601060248201526f4552525f5a45524f5f4144445245535360801b60448201526064016103e9565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60606007805461027d90610b0d565b3360008181526003602090815260408083206001600160a01b0387168452909152812054909161030d918590610359908661097f565b600061030d3384846107bb565b6000806104f48361054b565b6001600160a01b038416600090815260026020526040902054909150811115610542576001600160a01b03831660009081526002602052604090205461053b90829061097f565b9392505050565b50600092915050565b600060196005544361055d9190610b5d565b610568906001610b70565b1061057557600454610311565b6040516bffffffffffffffffffffffff19606084901b1660208201526b0b46dc3f1945bf8ce2000000906b0b576769456dc21d76000000906000906034016040516020818303038152906040529050600081600183516105d59190610b5d565b815181106105e5576105e5610b83565b016020015160f81c90506001600682148061060357508160ff166098145b8061061157508160ff1660aa145b8061061f57508160ff1660c1145b8061062d57508160ff1660da145b1561063a57506005610653565b610645600483610baf565b610650906001610bd1565b90505b61068b856106856106678760ff86166109b9565b6005546106749043610b5d565b61067f906001610b70565b906109b9565b9061097f565b979650505050505050565b6001600160a01b0383166106f85760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103e9565b6001600160a01b0382166107595760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103e9565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03831661081f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103e9565b6001600160a01b0382166108815760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103e9565b61088a826104e8565b8111156108aa57604051635f8c625960e01b815260040160405180910390fd5b6001600160a01b0383166000908152600160205260409020546108cd908261097f565b6001600160a01b0380851660009081526001602052604080822093909355908416815220546108fc908261099b565b6001600160a01b03831660009081526001602090815260408083209390935560029052205461092b908261099b565b6001600160a01b0380841660008181526002602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906107ae9085815260200190565b60008282111561099157610991610bea565b61053b8284610b5d565b60006109a78284610b70565b90508281101561031157610311610bea565b6000826000036109cb57506000610311565b6109d58284610c00565b9050816109e28483610c17565b1461031157610311610bea565b600060208083528351808285015260005b81811015610a1c57858101830151858201604001528201610a00565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610a5457600080fd5b919050565b60008060408385031215610a6c57600080fd5b610a7583610a3d565b946020939093013593505050565b600080600060608486031215610a9857600080fd5b610aa184610a3d565b9250610aaf60208501610a3d565b9150604084013590509250925092565b600060208284031215610ad157600080fd5b61053b82610a3d565b60008060408385031215610aed57600080fd5b610af683610a3d565b9150610b0460208401610a3d565b90509250929050565b600181811c90821680610b2157607f821691505b602082108103610b4157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561031157610311610b47565b8082018082111561031157610311610b47565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600060ff831680610bc257610bc2610b99565b8060ff84160691505092915050565b60ff818116838216019081111561031157610311610b47565b634e487b7160e01b600052600160045260246000fd5b808202811582820484141761031157610311610b47565b600082610c2657610c26610b99565b50049056fea26469706673582212201497167e3311c9b883382c0f3552368af4be56d70dad9706d6cd698a30b197bd64736f6c63430008120033";

type TestTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestToken__factory extends ContractFactory {
  constructor(...args: TestTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestToken> {
    return super.deploy(name_, symbol_, overrides || {}) as Promise<TestToken>;
  }
  override getDeployTransaction(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name_, symbol_, overrides || {});
  }
  override attach(address: string): TestToken {
    return super.attach(address) as TestToken;
  }
  override connect(signer: Signer): TestToken__factory {
    return super.connect(signer) as TestToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestTokenInterface {
    return new utils.Interface(_abi) as TestTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestToken {
    return new Contract(address, _abi, signerOrProvider) as TestToken;
  }
}
