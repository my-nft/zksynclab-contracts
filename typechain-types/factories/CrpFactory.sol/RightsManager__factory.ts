/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  RightsManager,
  RightsManagerInterface,
} from "../../CrpFactory.sol/RightsManager";

const _abi = [
  {
    inputs: [],
    name: "DEFAULT_CAN_ADD_REMOVE_TOKENS",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DEFAULT_CAN_CHANGE_CAP",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DEFAULT_CAN_CHANGE_SWAP_FEE",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DEFAULT_CAN_CHANGE_WEIGHTS",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DEFAULT_CAN_PAUSE_SWAPPING",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DEFAULT_CAN_WHITELIST_LPS",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool[]",
        name: "a",
        type: "bool[]",
      },
    ],
    name: "constructRights",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "canPauseSwapping",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "canChangeSwapFee",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "canChangeWeights",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "canAddRemoveTokens",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "canWhitelistLPs",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "canChangeCap",
            type: "bool",
          },
        ],
        internalType: "struct RightsManager.Rights",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "canPauseSwapping",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "canChangeSwapFee",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "canChangeWeights",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "canAddRemoveTokens",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "canWhitelistLPs",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "canChangeCap",
            type: "bool",
          },
        ],
        internalType: "struct RightsManager.Rights",
        name: "rights",
        type: "tuple",
      },
    ],
    name: "convertRights",
    outputs: [
      {
        internalType: "bool[]",
        name: "",
        type: "bool[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "canPauseSwapping",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "canChangeSwapFee",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "canChangeWeights",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "canAddRemoveTokens",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "canWhitelistLPs",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "canChangeCap",
            type: "bool",
          },
        ],
        internalType: "struct RightsManager.Rights",
        name: "self",
        type: "tuple",
      },
      {
        internalType: "enum RightsManager.Permissions",
        name: "permission",
        type: "RightsManager.Permissions",
      },
    ],
    name: "hasPermission",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61061161003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061009d5760003560e01c80634583544a116100705780634583544a146100c7578063710a51c2146100da578063c08473fc146100fa578063cb0d28f6146100bf578063dccf54e7146100a257600080fd5b806308395a34146100a257806321bb04ae146100bf5780632cc0c346146100a25780633d027b9d146100a2575b600080fd5b6100aa600081565b60405190151581526020015b60405180910390f35b6100aa600181565b6100aa6100d5366004610489565b610165565b6100ed6100e83660046104c5565b610177565b6040516100b691906104e8565b61010d61010836600461052e565b6102d2565b6040516100b69190600060c08201905082511515825260208301511515602083015260408301511515604083015260608301511515606083015260808301511515608083015260a0830151151560a083015292915050565b60006020808302840160003760206000f35b60408051600680825260e08201909252606091600091906020820160c0803683370190505090506101ab60208401846105a3565b816000815181106101be576101be6105c5565b9115156020928302919091018201526101dd90604085019085016105a3565b816001815181106101f0576101f06105c5565b9115156020928302919091019091015261021060608401604085016105a3565b81600281518110610223576102236105c5565b9115156020928302919091019091015261024360808401606085016105a3565b81600381518110610256576102566105c5565b9115156020928302919091019091015261027660a08401608085016105a3565b81600481518110610289576102896105c5565b911515602092830291909101909101526102a960c0840160a085016105a3565b816005815181106102bc576102bc6105c5565b9115156020928302919091019091015292915050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081018290529082900361034657506040805160c081018252600080825260016020830181905292820192909252606081018290526080810182905260a081019190915261046b565b6040518060c0016040528084846000818110610364576103646105c5565b905060200201602081019061037991906105a3565b1515815260200184846001818110610393576103936105c5565b90506020020160208101906103a891906105a3565b15158152602001848460028181106103c2576103c26105c5565b90506020020160208101906103d791906105a3565b15158152602001848460038181106103f1576103f16105c5565b905060200201602081019061040691906105a3565b1515815260200184846004818110610420576104206105c5565b905060200201602081019061043591906105a3565b151581526020018484600581811061044f5761044f6105c5565b905060200201602081019061046491906105a3565b1515905290505b92915050565b600060c0828403121561048357600080fd5b50919050565b60008060e0838503121561049c57600080fd5b6104a68484610471565b915060c0830135600681106104ba57600080fd5b809150509250929050565b600060c082840312156104d757600080fd5b6104e18383610471565b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015610522578351151583529284019291840191600101610504565b50909695505050505050565b6000806020838503121561054157600080fd5b823567ffffffffffffffff8082111561055957600080fd5b818501915085601f83011261056d57600080fd5b81358181111561057c57600080fd5b8660208260051b850101111561059157600080fd5b60209290920196919550909350505050565b6000602082840312156105b557600080fd5b813580151581146104e157600080fd5b634e487b7160e01b600052603260045260246000fdfea2646970667358221220aaca9b567e88ec2aaa1a4e40724ed4536a7a8410190c56c6ecbeea1b33b6ecf164736f6c63430008120033";

type RightsManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RightsManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RightsManager__factory extends ContractFactory {
  constructor(...args: RightsManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RightsManager> {
    return super.deploy(overrides || {}) as Promise<RightsManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RightsManager {
    return super.attach(address) as RightsManager;
  }
  override connect(signer: Signer): RightsManager__factory {
    return super.connect(signer) as RightsManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RightsManagerInterface {
    return new utils.Interface(_abi) as RightsManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RightsManager {
    return new Contract(address, _abi, signerOrProvider) as RightsManager;
  }
}
