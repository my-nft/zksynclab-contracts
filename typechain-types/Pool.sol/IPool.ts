/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface IPoolInterface extends utils.Interface {
  functions: {
    "bind(address,uint256,uint256)": FunctionFragment;
    "calcPoolInGivenSingleOut(uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcPoolOutGivenSingleIn(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcSingleInGivenPoolOut(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcSingleOutGivenPoolIn(uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "getBalance(address)": FunctionFragment;
    "getCurrentTokens()": FunctionFragment;
    "getDenormalizedWeight(address)": FunctionFragment;
    "getExitFee()": FunctionFragment;
    "getExitFeeCollector()": FunctionFragment;
    "getNormalizedWeight(address)": FunctionFragment;
    "getSwapFee()": FunctionFragment;
    "getTotalDenormalizedWeight()": FunctionFragment;
    "isBound(address)": FunctionFragment;
    "isPublicSwap()": FunctionFragment;
    "rebind(address,uint256,uint256)": FunctionFragment;
    "setExitFee(uint256)": FunctionFragment;
    "setExitFeeCollector(address)": FunctionFragment;
    "setPublicSwap(bool)": FunctionFragment;
    "setSwapFee(uint256)": FunctionFragment;
    "unbind(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bind"
      | "calcPoolInGivenSingleOut"
      | "calcPoolOutGivenSingleIn"
      | "calcSingleInGivenPoolOut"
      | "calcSingleOutGivenPoolIn"
      | "getBalance"
      | "getCurrentTokens"
      | "getDenormalizedWeight"
      | "getExitFee"
      | "getExitFeeCollector"
      | "getNormalizedWeight"
      | "getSwapFee"
      | "getTotalDenormalizedWeight"
      | "isBound"
      | "isPublicSwap"
      | "rebind"
      | "setExitFee"
      | "setExitFeeCollector"
      | "setPublicSwap"
      | "setSwapFee"
      | "unbind"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bind",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcPoolInGivenSingleOut",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcPoolOutGivenSingleIn",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcSingleInGivenPoolOut",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcSingleOutGivenPoolIn",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDenormalizedWeight",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getExitFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExitFeeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNormalizedWeight",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDenormalizedWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBound",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPublicSwap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rebind",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setExitFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExitFeeCollector",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicSwap",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unbind",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "bind", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcPoolInGivenSingleOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcPoolOutGivenSingleIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcSingleInGivenPoolOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcSingleOutGivenPoolIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDenormalizedWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getExitFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExitFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNormalizedWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSwapFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDenormalizedWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isBound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPublicSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rebind", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setExitFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setExitFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSwapFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unbind", data: BytesLike): Result;

  events: {};
}

export interface IPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bind(
      token: PromiseOrValue<string>,
      balance: PromiseOrValue<BigNumberish>,
      denorm: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calcPoolInGivenSingleOut(
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { poolAmountIn: BigNumber }>;

    calcPoolOutGivenSingleIn(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { poolAmountOut: BigNumber }>;

    calcSingleInGivenPoolOut(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      poolAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenAmountIn: BigNumber }>;

    calcSingleOutGivenPoolIn(
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      poolAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenAmountOut: BigNumber }>;

    getBalance(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentTokens(
      overrides?: CallOverrides
    ): Promise<[string[]] & { tokens: string[] }>;

    getDenormalizedWeight(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getExitFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getExitFeeCollector(overrides?: CallOverrides): Promise<[string]>;

    getNormalizedWeight(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSwapFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalDenormalizedWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    isBound(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPublicSwap(overrides?: CallOverrides): Promise<[boolean]>;

    rebind(
      token: PromiseOrValue<string>,
      balance: PromiseOrValue<BigNumberish>,
      denorm: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExitFee(
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExitFeeCollector(
      feeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPublicSwap(
      publicSwap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSwapFee(
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unbind(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  bind(
    token: PromiseOrValue<string>,
    balance: PromiseOrValue<BigNumberish>,
    denorm: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calcPoolInGivenSingleOut(
    tokenBalanceOut: PromiseOrValue<BigNumberish>,
    tokenWeightOut: PromiseOrValue<BigNumberish>,
    poolSupply: PromiseOrValue<BigNumberish>,
    totalWeight: PromiseOrValue<BigNumberish>,
    tokenAmountOut: PromiseOrValue<BigNumberish>,
    swapFee: PromiseOrValue<BigNumberish>,
    exitFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcPoolOutGivenSingleIn(
    tokenBalanceIn: PromiseOrValue<BigNumberish>,
    tokenWeightIn: PromiseOrValue<BigNumberish>,
    poolSupply: PromiseOrValue<BigNumberish>,
    totalWeight: PromiseOrValue<BigNumberish>,
    tokenAmountIn: PromiseOrValue<BigNumberish>,
    swapFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcSingleInGivenPoolOut(
    tokenBalanceIn: PromiseOrValue<BigNumberish>,
    tokenWeightIn: PromiseOrValue<BigNumberish>,
    poolSupply: PromiseOrValue<BigNumberish>,
    totalWeight: PromiseOrValue<BigNumberish>,
    poolAmountOut: PromiseOrValue<BigNumberish>,
    swapFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcSingleOutGivenPoolIn(
    tokenBalanceOut: PromiseOrValue<BigNumberish>,
    tokenWeightOut: PromiseOrValue<BigNumberish>,
    poolSupply: PromiseOrValue<BigNumberish>,
    totalWeight: PromiseOrValue<BigNumberish>,
    poolAmountIn: PromiseOrValue<BigNumberish>,
    swapFee: PromiseOrValue<BigNumberish>,
    exitFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBalance(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentTokens(overrides?: CallOverrides): Promise<string[]>;

  getDenormalizedWeight(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getExitFee(overrides?: CallOverrides): Promise<BigNumber>;

  getExitFeeCollector(overrides?: CallOverrides): Promise<string>;

  getNormalizedWeight(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalDenormalizedWeight(overrides?: CallOverrides): Promise<BigNumber>;

  isBound(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPublicSwap(overrides?: CallOverrides): Promise<boolean>;

  rebind(
    token: PromiseOrValue<string>,
    balance: PromiseOrValue<BigNumberish>,
    denorm: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExitFee(
    exitFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExitFeeCollector(
    feeCollector: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPublicSwap(
    publicSwap: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSwapFee(
    swapFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unbind(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bind(
      token: PromiseOrValue<string>,
      balance: PromiseOrValue<BigNumberish>,
      denorm: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    calcPoolInGivenSingleOut(
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcPoolOutGivenSingleIn(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSingleInGivenPoolOut(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      poolAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSingleOutGivenPoolIn(
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      poolAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalance(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentTokens(overrides?: CallOverrides): Promise<string[]>;

    getDenormalizedWeight(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExitFee(overrides?: CallOverrides): Promise<BigNumber>;

    getExitFeeCollector(overrides?: CallOverrides): Promise<string>;

    getNormalizedWeight(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalDenormalizedWeight(overrides?: CallOverrides): Promise<BigNumber>;

    isBound(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPublicSwap(overrides?: CallOverrides): Promise<boolean>;

    rebind(
      token: PromiseOrValue<string>,
      balance: PromiseOrValue<BigNumberish>,
      denorm: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExitFee(
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExitFeeCollector(
      feeCollector: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPublicSwap(
      publicSwap: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapFee(
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unbind(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    bind(
      token: PromiseOrValue<string>,
      balance: PromiseOrValue<BigNumberish>,
      denorm: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calcPoolInGivenSingleOut(
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcPoolOutGivenSingleIn(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSingleInGivenPoolOut(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      poolAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcSingleOutGivenPoolIn(
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      poolAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalance(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getDenormalizedWeight(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExitFee(overrides?: CallOverrides): Promise<BigNumber>;

    getExitFeeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    getNormalizedWeight(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalDenormalizedWeight(overrides?: CallOverrides): Promise<BigNumber>;

    isBound(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPublicSwap(overrides?: CallOverrides): Promise<BigNumber>;

    rebind(
      token: PromiseOrValue<string>,
      balance: PromiseOrValue<BigNumberish>,
      denorm: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExitFee(
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExitFeeCollector(
      feeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPublicSwap(
      publicSwap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSwapFee(
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unbind(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bind(
      token: PromiseOrValue<string>,
      balance: PromiseOrValue<BigNumberish>,
      denorm: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calcPoolInGivenSingleOut(
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcPoolOutGivenSingleIn(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcSingleInGivenPoolOut(
      tokenBalanceIn: PromiseOrValue<BigNumberish>,
      tokenWeightIn: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      poolAmountOut: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcSingleOutGivenPoolIn(
      tokenBalanceOut: PromiseOrValue<BigNumberish>,
      tokenWeightOut: PromiseOrValue<BigNumberish>,
      poolSupply: PromiseOrValue<BigNumberish>,
      totalWeight: PromiseOrValue<BigNumberish>,
      poolAmountIn: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalance(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDenormalizedWeight(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExitFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExitFeeCollector(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNormalizedWeight(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalDenormalizedWeight(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBound(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPublicSwap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebind(
      token: PromiseOrValue<string>,
      balance: PromiseOrValue<BigNumberish>,
      denorm: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExitFee(
      exitFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExitFeeCollector(
      feeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPublicSwap(
      publicSwap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSwapFee(
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unbind(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
