/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface SmartPoolManagerInterface extends utils.Interface {
  functions: {
    "exitPool(IConfigurableRightsPool,IPool,uint256,uint256[])": FunctionFragment;
    "exitswapExternAmountOut(IConfigurableRightsPool,IPool,address,uint256,uint256)": FunctionFragment;
    "exitswapPoolAmountIn(IConfigurableRightsPool,IPool,address,uint256,uint256)": FunctionFragment;
    "joinPool(IConfigurableRightsPool,IPool,uint256,uint256[])": FunctionFragment;
    "joinswapExternAmountIn(IConfigurableRightsPool,IPool,address,uint256,uint256)": FunctionFragment;
    "joinswapPoolAmountOut(IConfigurableRightsPool,IPool,address,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "exitPool"
      | "exitswapExternAmountOut"
      | "exitswapPoolAmountIn"
      | "joinPool"
      | "joinswapExternAmountIn"
      | "joinswapPoolAmountOut"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "exitPool",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exitswapExternAmountOut",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exitswapPoolAmountIn",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "joinPool",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "joinswapExternAmountIn",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "joinswapPoolAmountOut",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "exitPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exitswapExternAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitswapPoolAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "joinswapExternAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinswapPoolAmountOut",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SmartPoolManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SmartPoolManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    exitPool(
      self: PromiseOrValue<string>,
      corePool: PromiseOrValue<string>,
      poolAmountIn: PromiseOrValue<BigNumberish>,
      minAmountsOut: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber[]] & {
        exitFee: BigNumber;
        pAiAfterExitFee: BigNumber;
        actualAmountsOut: BigNumber[];
      }
    >;

    exitswapExternAmountOut(
      self: PromiseOrValue<string>,
      corePool: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      maxPoolAmountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        exitFee: BigNumber;
        pAiAfterExitFee: BigNumber;
        poolAmountIn: BigNumber;
      }
    >;

    exitswapPoolAmountIn(
      self: PromiseOrValue<string>,
      corePool: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      poolAmountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        exitFee: BigNumber;
        pAiAfterExitFee: BigNumber;
        tokenAmountOut: BigNumber;
      }
    >;

    joinPool(
      self: PromiseOrValue<string>,
      corePool: PromiseOrValue<string>,
      poolAmountOut: PromiseOrValue<BigNumberish>,
      maxAmountsIn: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { actualAmountsIn: BigNumber[] }>;

    joinswapExternAmountIn(
      self: PromiseOrValue<string>,
      corePool: PromiseOrValue<string>,
      tokenIn: PromiseOrValue<string>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      minPoolAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { poolAmountOut: BigNumber }>;

    joinswapPoolAmountOut(
      self: PromiseOrValue<string>,
      corePool: PromiseOrValue<string>,
      tokenIn: PromiseOrValue<string>,
      poolAmountOut: PromiseOrValue<BigNumberish>,
      maxAmountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenAmountIn: BigNumber }>;
  };

  exitPool(
    self: PromiseOrValue<string>,
    corePool: PromiseOrValue<string>,
    poolAmountIn: PromiseOrValue<BigNumberish>,
    minAmountsOut: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber[]] & {
      exitFee: BigNumber;
      pAiAfterExitFee: BigNumber;
      actualAmountsOut: BigNumber[];
    }
  >;

  exitswapExternAmountOut(
    self: PromiseOrValue<string>,
    corePool: PromiseOrValue<string>,
    tokenOut: PromiseOrValue<string>,
    tokenAmountOut: PromiseOrValue<BigNumberish>,
    maxPoolAmountIn: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      exitFee: BigNumber;
      pAiAfterExitFee: BigNumber;
      poolAmountIn: BigNumber;
    }
  >;

  exitswapPoolAmountIn(
    self: PromiseOrValue<string>,
    corePool: PromiseOrValue<string>,
    tokenOut: PromiseOrValue<string>,
    poolAmountIn: PromiseOrValue<BigNumberish>,
    minAmountOut: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      exitFee: BigNumber;
      pAiAfterExitFee: BigNumber;
      tokenAmountOut: BigNumber;
    }
  >;

  joinPool(
    self: PromiseOrValue<string>,
    corePool: PromiseOrValue<string>,
    poolAmountOut: PromiseOrValue<BigNumberish>,
    maxAmountsIn: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  joinswapExternAmountIn(
    self: PromiseOrValue<string>,
    corePool: PromiseOrValue<string>,
    tokenIn: PromiseOrValue<string>,
    tokenAmountIn: PromiseOrValue<BigNumberish>,
    minPoolAmountOut: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  joinswapPoolAmountOut(
    self: PromiseOrValue<string>,
    corePool: PromiseOrValue<string>,
    tokenIn: PromiseOrValue<string>,
    poolAmountOut: PromiseOrValue<BigNumberish>,
    maxAmountIn: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    exitPool(
      self: PromiseOrValue<string>,
      corePool: PromiseOrValue<string>,
      poolAmountIn: PromiseOrValue<BigNumberish>,
      minAmountsOut: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber[]] & {
        exitFee: BigNumber;
        pAiAfterExitFee: BigNumber;
        actualAmountsOut: BigNumber[];
      }
    >;

    exitswapExternAmountOut(
      self: PromiseOrValue<string>,
      corePool: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      maxPoolAmountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        exitFee: BigNumber;
        pAiAfterExitFee: BigNumber;
        poolAmountIn: BigNumber;
      }
    >;

    exitswapPoolAmountIn(
      self: PromiseOrValue<string>,
      corePool: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      poolAmountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        exitFee: BigNumber;
        pAiAfterExitFee: BigNumber;
        tokenAmountOut: BigNumber;
      }
    >;

    joinPool(
      self: PromiseOrValue<string>,
      corePool: PromiseOrValue<string>,
      poolAmountOut: PromiseOrValue<BigNumberish>,
      maxAmountsIn: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    joinswapExternAmountIn(
      self: PromiseOrValue<string>,
      corePool: PromiseOrValue<string>,
      tokenIn: PromiseOrValue<string>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      minPoolAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinswapPoolAmountOut(
      self: PromiseOrValue<string>,
      corePool: PromiseOrValue<string>,
      tokenIn: PromiseOrValue<string>,
      poolAmountOut: PromiseOrValue<BigNumberish>,
      maxAmountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    exitPool(
      self: PromiseOrValue<string>,
      corePool: PromiseOrValue<string>,
      poolAmountIn: PromiseOrValue<BigNumberish>,
      minAmountsOut: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exitswapExternAmountOut(
      self: PromiseOrValue<string>,
      corePool: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      maxPoolAmountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exitswapPoolAmountIn(
      self: PromiseOrValue<string>,
      corePool: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      poolAmountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinPool(
      self: PromiseOrValue<string>,
      corePool: PromiseOrValue<string>,
      poolAmountOut: PromiseOrValue<BigNumberish>,
      maxAmountsIn: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinswapExternAmountIn(
      self: PromiseOrValue<string>,
      corePool: PromiseOrValue<string>,
      tokenIn: PromiseOrValue<string>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      minPoolAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinswapPoolAmountOut(
      self: PromiseOrValue<string>,
      corePool: PromiseOrValue<string>,
      tokenIn: PromiseOrValue<string>,
      poolAmountOut: PromiseOrValue<BigNumberish>,
      maxAmountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    exitPool(
      self: PromiseOrValue<string>,
      corePool: PromiseOrValue<string>,
      poolAmountIn: PromiseOrValue<BigNumberish>,
      minAmountsOut: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exitswapExternAmountOut(
      self: PromiseOrValue<string>,
      corePool: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      maxPoolAmountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exitswapPoolAmountIn(
      self: PromiseOrValue<string>,
      corePool: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      poolAmountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinPool(
      self: PromiseOrValue<string>,
      corePool: PromiseOrValue<string>,
      poolAmountOut: PromiseOrValue<BigNumberish>,
      maxAmountsIn: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinswapExternAmountIn(
      self: PromiseOrValue<string>,
      corePool: PromiseOrValue<string>,
      tokenIn: PromiseOrValue<string>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      minPoolAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinswapPoolAmountOut(
      self: PromiseOrValue<string>,
      corePool: PromiseOrValue<string>,
      tokenIn: PromiseOrValue<string>,
      poolAmountOut: PromiseOrValue<BigNumberish>,
      maxAmountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
