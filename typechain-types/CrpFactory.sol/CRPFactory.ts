/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace ConfigurableRightsPool {
  export type PoolParamsStruct = {
    poolTokenSymbol: PromiseOrValue<string>;
    poolTokenName: PromiseOrValue<string>;
    constituentTokens: PromiseOrValue<string>[];
    tokenBalances: PromiseOrValue<BigNumberish>[];
    tokenWeights: PromiseOrValue<BigNumberish>[];
    swapFee: PromiseOrValue<BigNumberish>;
  };

  export type PoolParamsStructOutput = [
    string,
    string,
    string[],
    BigNumber[],
    BigNumber[],
    BigNumber
  ] & {
    poolTokenSymbol: string;
    poolTokenName: string;
    constituentTokens: string[];
    tokenBalances: BigNumber[];
    tokenWeights: BigNumber[];
    swapFee: BigNumber;
  };
}

export declare namespace RightsManager {
  export type RightsStruct = {
    canPauseSwapping: PromiseOrValue<boolean>;
    canChangeSwapFee: PromiseOrValue<boolean>;
    canChangeWeights: PromiseOrValue<boolean>;
    canAddRemoveTokens: PromiseOrValue<boolean>;
    canWhitelistLPs: PromiseOrValue<boolean>;
    canChangeCap: PromiseOrValue<boolean>;
  };

  export type RightsStructOutput = [
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean
  ] & {
    canPauseSwapping: boolean;
    canChangeSwapFee: boolean;
    canChangeWeights: boolean;
    canAddRemoveTokens: boolean;
    canWhitelistLPs: boolean;
    canChangeCap: boolean;
  };
}

export interface CRPFactoryInterface extends utils.Interface {
  functions: {
    "getController()": FunctionFragment;
    "isCrp(address)": FunctionFragment;
    "newCrp(address,(string,string,address[],uint256[],uint256[],uint256),(bool,bool,bool,bool,bool,bool))": FunctionFragment;
    "setController(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getController"
      | "isCrp"
      | "newCrp"
      | "setController"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCrp",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "newCrp",
    values: [
      PromiseOrValue<string>,
      ConfigurableRightsPool.PoolParamsStruct,
      RightsManager.RightsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isCrp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newCrp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;

  events: {
    "LogNewCrp(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogNewCrp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface LogNewCrpEventObject {
  caller: string;
  pool: string;
}
export type LogNewCrpEvent = TypedEvent<[string, string], LogNewCrpEventObject>;

export type LogNewCrpEventFilter = TypedEventFilter<LogNewCrpEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface CRPFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CRPFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getController(overrides?: CallOverrides): Promise<[string]>;

    isCrp(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    newCrp(
      factoryAddress: PromiseOrValue<string>,
      poolParams: ConfigurableRightsPool.PoolParamsStruct,
      rights: RightsManager.RightsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setController(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getController(overrides?: CallOverrides): Promise<string>;

  isCrp(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  newCrp(
    factoryAddress: PromiseOrValue<string>,
    poolParams: ConfigurableRightsPool.PoolParamsStruct,
    rights: RightsManager.RightsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setController(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getController(overrides?: CallOverrides): Promise<string>;

    isCrp(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    newCrp(
      factoryAddress: PromiseOrValue<string>,
      poolParams: ConfigurableRightsPool.PoolParamsStruct,
      rights: RightsManager.RightsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    setController(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogNewCrp(address,address)"(
      caller?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null
    ): LogNewCrpEventFilter;
    LogNewCrp(
      caller?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null
    ): LogNewCrpEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    getController(overrides?: CallOverrides): Promise<BigNumber>;

    isCrp(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newCrp(
      factoryAddress: PromiseOrValue<string>,
      poolParams: ConfigurableRightsPool.PoolParamsStruct,
      rights: RightsManager.RightsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setController(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isCrp(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newCrp(
      factoryAddress: PromiseOrValue<string>,
      poolParams: ConfigurableRightsPool.PoolParamsStruct,
      rights: RightsManager.RightsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setController(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
